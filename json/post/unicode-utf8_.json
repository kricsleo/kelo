{"title":"ASCII-Unicode-UTF8","date":"2018-09-05T09:33:51.000Z","updated":"2020-11-19T04:21:12.229Z","comments":true,"layout":"post","content":"<h1 id=\"ASCII-Unicode和UTF8之间的关系\"><a href=\"#ASCII-Unicode和UTF8之间的关系\" class=\"headerlink\" title=\"ASCII, Unicode和UTF8之间的关系\"></a>ASCII, Unicode和UTF8之间的关系</h1><p>本文主要了解一下ASCII码、Unicode码和UTF-8码的来源和相互之间的关系, 顺便也理了一下中文编码GB2312, GBK, GB18030的关系。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><p>在上世纪60年代，美国制定了ASCII码，主要目的是为了用二进制编码的方式来表达英文字符，用一个8位的字节大小对应了128个字符，其中包括了可打印出来的96个字符和32个不可打印的控制字符, 规则是二进制中第1位固定为<code>0</code>, 后面7位用来编码, 刚好可以表示2<sup>7</sup> = 128个字符, 例如规定空格<kbd>SPACE</kbd>的编码为<code>00100000</code>, 十进制是<code>32</code>, 大写字母<code>A</code>的编码为<code>01000001</code>, 十进制是<code>65</code>, 附上<a href=\"https://www.sojson.com/asciitable.html\">ASCII码表</a></p>\n<h2 id=\"GB2312-GBK-GB18030\"><a href=\"#GB2312-GBK-GB18030\" class=\"headerlink\" title=\"GB2312, GBK, GB18030\"></a>GB2312, GBK, GB18030</h2><ul>\n<li>GB2312 是对 ASCII 的中文扩展, 一个小于127的字符的意义与ASCII码相同, 但是当两个大于127的字符连在一起时就表示汉字, 同时GB2312在127之外的地方把ASCII已经有的数字, 标点和字母又重新加入了一遍, 这些重新加入的字符占用两个字节的空间, 也就是说在GB2312中有两套数字, 字母和标点, 码值小于127的那一套因为是ASCII码, 只占用一个字节, 就叫’半角’符号, 而新加入的一套数字, 字母和标点就叫’全角’符号.</li>\n<li>因为GB2312只收录了6763个汉字, 很多的汉字也需要加入编码中, 所以微软对GB2312进行了扩展, 规定只要第一个字节大于127, 那么就不管后面一个字节是不是大于127的, 通通都认为这两个字节一起表示了一个汉字, 这样就又增加了近20000个新的汉字（包括繁体字）和符号, 扩充之后就成为GBK标准, 它向下兼容GB2312编码，出现于Windows 95简体中文版中, 但是这个是微软标准, 并不是国家标准.</li>\n<li>后来又加入了少数民族文字，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了GB18030, GB18030成为了国家标准.</li>\n</ul>\n<h2 id=\"Unicode码\"><a href=\"#Unicode码\" class=\"headerlink\" title=\"Unicode码\"></a>Unicode码</h2><p>ASCII码虽然满足了美国的需求,但是对于其它语言而言128个字符是远远不够的, 比如法语中字母上方有注音, 这是ASCII码无法表示的, 又比如汉字有10万左右, 这也是超出了ASCII码的范围, 所以后来Unicode码出现了.<br>Unicode码有着很大的容量, 现在的规模可以容纳100多万个符号, 每个符号的编码都不一样, 比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字<code>严</code>。你可以使用在线的<a href=\"https//tool.chinaz.com/Tools/unicode.aspx\">工具</a>来转换成Unicode码. </p>\n<h3 id=\"Unicode码编码方式\"><a href=\"#Unicode码编码方式\" class=\"headerlink\" title=\"Unicode码编码方式\"></a>Unicode码编码方式</h3><p>Unicode码只是定义了每个字符对应的二进制代码是什么, 但是并没有规定字符对应的二进制应该以什么样的形式存储, Unicode统一规定，每个符号用三个或四个字节表示. 比如汉字<code>严</code>的Unicode码是十六进制数4E25, 转换成二进制就是<code>100111000100101</code>一共是15位, 至少占用2个字节的空间, 而其他的字符可能有更多的二进制位数, 而之前的ASCII码是固定为8位的, 如果采取将前面多余的位数全都置0的话, 那么在存储原来的ASCII码编码的文件时就会浪费大量的空间来存储无用的0信息, 这是不可接受的. 所以如何合理的用Unicode码来兼容原先的ASCII码信息就产生出了多种具体的实现方式. </p>\n<h3 id=\"UTF-8实现Unicode\"><a href=\"#UTF-8实现Unicode\" class=\"headerlink\" title=\"UTF-8实现Unicode\"></a>UTF-8实现Unicode</h3><p>UTF-8是目前使用最多的Unicode编码实现方式, 除此之外也有 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示）实现方式, 不过基本不使用.<br>UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。<br>按照如下两条规则来编码字符:</p>\n<ol>\n<li><p>对于单(n = 1)字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p>\n</li>\n<li><p>对于多(n &gt; 1)字节的符号，第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。<br>下表总结了编码规则，字母x表示可用编码的位。</p>\n<pre><code class=\"hljs text\">Unicode符号范围     |        UTF-8编码方式\n(十六进制)        |              （二进制）\n----------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</code></pre>\n<p>在解码的时候现查看二进制的第一位, 如果是0, 那么说明是单字节的字符, 直接将该字节按照Unicode码表转换成对应的字符即可, 如果第一位是1, 那么继续查看有几个连续的1, 有n个, 则说明连续的n个字节代表一个字符.<br>以汉字<code>严</code>为例, \b<code>严</code>的Unicode码是<code>4E25</code>(二进制为<code>100111000100101</code>), 根据上表, <code>4E25</code>处于<code>0000 0800 - 0000 FFFF</code>范围, 那么<code>严</code>的编码格式就是<code>1110xxxx 10xxxxxx 10xxxxxx</code>, 也就是说<code>严</code>的UTF-8编码方式就需要占用三个字节, 我们把<code>严</code>的二进制按照顺序填到<code>x</code>的位置, 最后得到的结果就是<code>11100100 10111000 10100101</code>, 转成16进制就是<code>E4B8A5</code>, 这就是<code>严</code>的UTF-8编码结果.<br>总得来说, <code>严</code>的Unicode码为<code>4E25</code>, UTF-8编码为<code>E4B8A5</code>, 这就好比你的身份证是<code>123456</code>, 在学校站队时老师按照一定的排队方式把你编排到了<code>五组三排第二个</code>, 这两者最后的结果是可以相互转换的, 你可借助在线<a href=\"https//tool.chinaz.com/Tools/unicode.aspx\">工具</a>验证.</p>\n</li>\n</ol>\n<h2 id=\"JavaScript中的Unicode与UTF-8\"><a href=\"#JavaScript中的Unicode与UTF-8\" class=\"headerlink\" title=\"JavaScript中的Unicode与UTF-8\"></a>JavaScript中的Unicode与UTF-8</h2><p>javascript程序是使用Unicode字符集编写的, 所以我们在JavaScript中经常使用的字符或者字符串实际上内部是采用Unicode编码的, 在有些情况下, 比如我们的服务器要求接受的二进制内容的编码必须是UTF-8, 那么我们在把JavaScript中的字符串发送到服务器之前就需要进行转码, 将Unicode字符串转为UTF-8字符串. 我们在前端有时候会看到的服务器返回的json数据中乱码实际上就是因为服务器发送数据的编码跟我们客户端接受数据的编码方式不一致导致的, 你可以试着将乱码字段拷贝到在线<a href=\"https//tool.chinaz.com/Tools/unicode.aspx\">工具</a>中进行转码, 比如选择将<code>Unicode转为UTF-8</code>, 然后你就能看到正确的信息.</p>\n<p>除了数据交互之外, 浏览器的URI也是我们能够了解这种编码转换的地方, 因为URI中的querystring必须按照UTF8的编码进行传输, 但是JavaScript中是Unicode的, 如果没有中文信息还好, 因为英文字符在这两者之间的码值是保持一致的, JavaScript的字符串<code>hello</code>到了URI中也还是<code>hello</code>, 如果你不手动去转换也是ok的, 但是一旦涉及到中文(包括其它非英文字符), 比如汉字<code>严</code>, 它的Unicode码值和UTF-8码值就差的很远, 如果你不进行手动转换, 直接将JavaScript中的字符<code>严</code>丢到地址栏的URI中, 那么就会导致URI乱码, 你再想从URI中把之前放进去的<code>严</code>取出来就会发现得到的根本不是汉字<code>严</code>, 而是一串乱码.</p>\n<h2 id=\"在JavaScript中如何转换Unicode与UTF-8\"><a href=\"#在JavaScript中如何转换Unicode与UTF-8\" class=\"headerlink\" title=\"在JavaScript中如何转换Unicode与UTF-8\"></a>在JavaScript中如何转换Unicode与UTF-8</h2><ul>\n<li>浏览器提供了三对方法来进行编码转换,<code>escape/unescape</code>, <code>encodeURI/decodeURI</code>和<code>encodeURIComponent/decodeURIComponent</code>.<ol>\n<li>第一对<code>escape/unescape</code>是非标准的, <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\">已经被废弃</a></strong>, 这里只说一下它的转码方式, <code>escape</code>在处理大于127的字符时是在字符的Unicode码前面直接加上一个<code>%u</code>, 例如<code>严</code>的Unicode码为<code>4E25</code>, 那么<code>escape(&#39;严&#39;)</code>的结果就是<code>%u4E25</code>, 再次强调, <strong>请不要使用<code>escape/unescape</code>, 它已被废弃</strong>;</li>\n<li>第二对<code>encodeURI/decodeURI</code>是用来给整个URL进行转码的, 它不会转义<code>&amp;, ?, /, =</code>这样的功能字符;</li>\n<li>第三对<code>encodeURIComponent/decodeURIComponent</code>是用来给URL的部分字段进行转码的, 它会对<code>&amp;, ?, /, =</code>这些特殊字符进行转义, 一般用来处理key-value形式的query字段.<br><code>encodeURI</code>和<code>encodeURIComponent</code>都是先将非英文字符的Unicode码转为UTF-8码, 然后在每个字节前面都加上一个<code>%</code>, 比如汉字<code>严</code>的Unicode码是<code>4E25</code>, 使用<code>encodeURI</code>编码时会先转成UTF-8码<code>E4 B8 A5</code>, 在用<code>%</code>连接起来就得到最后结果<code>%E4%B8%A5</code>.<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">//编码</span>\n<span class=\"hljs-built_in\">encodeURIComponent</span>(<span class=\"hljs-string\">&#x27;严&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &#x27;%E4%B8%A5&#x27;</span>\n\n<span class=\"hljs-comment\">//解码</span>\n<span class=\"hljs-built_in\">decodeURIComponent</span>(<span class=\"hljs-string\">&#x27;%E4%B8%A5&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &#x27;严&#x27;</span>\n\n<span class=\"hljs-comment\">//encodeURI和encodeURIComponent对比</span>\n<span class=\"hljs-built_in\">encodeURI</span>(<span class=\"hljs-string\">&#x27;www.kricsleo.com?name=&quot;张三&quot;&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;www.kricsleo.com?name=%22%E5%BC%A0%E4%B8%89%22&quot;</span>\n\n<span class=\"hljs-built_in\">encodeURIComponent</span>(<span class=\"hljs-string\">&#x27;www.kricsleo.com?name=&quot;张三&quot;&#x27;</span>) <span class=\"hljs-comment\">// =&gt; &quot;www.kricsleo.com%3Fname%3D%22%E5%BC%A0%E4%B8%89%22&quot;</span></code></pre></li>\n</ol>\n</li>\n<li>我们也可以自己用js来使用Unicode和UTF-8之间的相互转换<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 将字符串格式化为UTF8编码的字节</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">const</span> toUTF8 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, isGetBytes</span>) </span>&#123;\n      <span class=\"hljs-keyword\">var</span> back = [];\n      <span class=\"hljs-keyword\">var</span> byteSize = <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length; i++) &#123;\n          <span class=\"hljs-keyword\">var</span> code = str.charCodeAt(i);\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0x00</span> &lt;= code &amp;&amp; code &lt;= <span class=\"hljs-number\">0x7f</span>) &#123;\n                byteSize += <span class=\"hljs-number\">1</span>;\n                back.push(code);\n          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0x80</span> &lt;= code &amp;&amp; code &lt;= <span class=\"hljs-number\">0x7ff</span>) &#123;\n                byteSize += <span class=\"hljs-number\">2</span>;\n                back.push((<span class=\"hljs-number\">192</span> | (<span class=\"hljs-number\">31</span> &amp; (code &gt;&gt; <span class=\"hljs-number\">6</span>))));\n                back.push((<span class=\"hljs-number\">128</span> | (<span class=\"hljs-number\">63</span> &amp; code)))\n          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-number\">0x800</span> &lt;= code &amp;&amp; code &lt;= <span class=\"hljs-number\">0xd7ff</span>) \n                  || (<span class=\"hljs-number\">0xe000</span> &lt;= code &amp;&amp; code &lt;= <span class=\"hljs-number\">0xffff</span>)) &#123;\n                byteSize += <span class=\"hljs-number\">3</span>;\n                back.push((<span class=\"hljs-number\">224</span> | (<span class=\"hljs-number\">15</span> &amp; (code &gt;&gt; <span class=\"hljs-number\">12</span>))));\n                back.push((<span class=\"hljs-number\">128</span> | (<span class=\"hljs-number\">63</span> &amp; (code &gt;&gt; <span class=\"hljs-number\">6</span>))));\n                back.push((<span class=\"hljs-number\">128</span> | (<span class=\"hljs-number\">63</span> &amp; code)))\n          &#125;\n       &#125;\n       <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; back.length; i++) &#123;\n            back[i] &amp;= <span class=\"hljs-number\">0xff</span>;\n       &#125;\n       <span class=\"hljs-keyword\">if</span> (isGetBytes) &#123;\n            <span class=\"hljs-keyword\">return</span> back\n       &#125;\n       <span class=\"hljs-keyword\">if</span> (byteSize &lt;= <span class=\"hljs-number\">0xff</span>) &#123;\n            <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">0</span>, byteSize].concat(back);\n       &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            <span class=\"hljs-keyword\">return</span> [byteSize &gt;&gt; <span class=\"hljs-number\">8</span>, byteSize &amp; <span class=\"hljs-number\">0xff</span>].concat(back);\n        &#125;\n&#125;\n\ntoUTF8(<span class=\"hljs-string\">&#x27;严&#x27;</span>); <span class=\"hljs-comment\">// =&gt;  [0, 3, 228, 184, 165]</span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 读取UTF8编码的字节，并转为Unicode的字符串</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">const</span> fromUTF8 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arr</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> arr === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> arr;\n    &#125;\n    <span class=\"hljs-keyword\">var</span> UTF = <span class=\"hljs-string\">&#x27;&#x27;</span>, _arr = arr;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; _arr.length; i++) &#123;\n        <span class=\"hljs-keyword\">var</span> one = _arr[i].toString(<span class=\"hljs-number\">2</span>),\n                v = one.match(<span class=\"hljs-regexp\">/^1+?(?=0)/</span>);\n        <span class=\"hljs-keyword\">if</span> (v &amp;&amp; one.length == <span class=\"hljs-number\">8</span>) &#123;\n            <span class=\"hljs-keyword\">var</span> bytesLength = v[<span class=\"hljs-number\">0</span>].length;\n            <span class=\"hljs-keyword\">var</span> store = _arr[i].toString(<span class=\"hljs-number\">2</span>).slice(<span class=\"hljs-number\">7</span> - bytesLength);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> st = <span class=\"hljs-number\">1</span>; st &lt; bytesLength; st++) &#123;\n                store += _arr[st + i].toString(<span class=\"hljs-number\">2</span>).slice(<span class=\"hljs-number\">2</span>)\n            &#125;\n            UTF += <span class=\"hljs-built_in\">String</span>.fromCharCode(<span class=\"hljs-built_in\">parseInt</span>(store, <span class=\"hljs-number\">2</span>));\n            i += bytesLength - <span class=\"hljs-number\">1</span>\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            UTF += <span class=\"hljs-built_in\">String</span>.fromCharCode(_arr[i])\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> UTF\n&#125;\n\nfromUTF8([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">228</span>, <span class=\"hljs-number\">184</span>, <span class=\"hljs-number\">165</span>]); <span class=\"hljs-comment\">// =&gt; &#x27;严&#x27;</span></code></pre>\n\n</li>\n</ul>\n<p>参考资料:</p>\n<ol>\n<li>阮一峰的博客: https//<a href=\"http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\">www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></li>\n<li>segmentfault上张亚涛的专栏: <a href=\"https://segmentfault.com/a/1190000005794963\">https://segmentfault.com/a/1190000005794963</a></li>\n</ol>\n","excerpt":"<h1 id=\"ASCII-Unicode和UTF8之间的关系\"><a href=\"#ASCII-Unicode和UTF8之间的关系\" class=\"headerlink\" title=\"ASCII, Unicode和UTF8之间的关系\"></a>ASCII, Unicode和UTF8之间的关系</h1><p>本文主要了解一下ASCII码、Unicode码和UTF-8码的来源和相互之间的关系, 顺便也理了一下中文编码GB2312, GBK, GB18030的关系。</p>","more":"<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><p>在上世纪60年代，美国制定了ASCII码，主要目的是为了用二进制编码的方式来表达英文字符，用一个8位的字节大小对应了128个字符，其中包括了可打印出来的96个字符和32个不可打印的控制字符, 规则是二进制中第1位固定为<code>0</code>, 后面7位用来编码, 刚好可以表示2<sup>7</sup> = 128个字符, 例如规定空格<kbd>SPACE</kbd>的编码为<code>00100000</code>, 十进制是<code>32</code>, 大写字母<code>A</code>的编码为<code>01000001</code>, 十进制是<code>65</code>, 附上<a href=\"https://www.sojson.com/asciitable.html\">ASCII码表</a></p>\n<h2 id=\"GB2312-GBK-GB18030\"><a href=\"#GB2312-GBK-GB18030\" class=\"headerlink\" title=\"GB2312, GBK, GB18030\"></a>GB2312, GBK, GB18030</h2><ul>\n<li>GB2312 是对 ASCII 的中文扩展, 一个小于127的字符的意义与ASCII码相同, 但是当两个大于127的字符连在一起时就表示汉字, 同时GB2312在127之外的地方把ASCII已经有的数字, 标点和字母又重新加入了一遍, 这些重新加入的字符占用两个字节的空间, 也就是说在GB2312中有两套数字, 字母和标点, 码值小于127的那一套因为是ASCII码, 只占用一个字节, 就叫’半角’符号, 而新加入的一套数字, 字母和标点就叫’全角’符号.</li>\n<li>因为GB2312只收录了6763个汉字, 很多的汉字也需要加入编码中, 所以微软对GB2312进行了扩展, 规定只要第一个字节大于127, 那么就不管后面一个字节是不是大于127的, 通通都认为这两个字节一起表示了一个汉字, 这样就又增加了近20000个新的汉字（包括繁体字）和符号, 扩充之后就成为GBK标准, 它向下兼容GB2312编码，出现于Windows 95简体中文版中, 但是这个是微软标准, 并不是国家标准.</li>\n<li>后来又加入了少数民族文字，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了GB18030, GB18030成为了国家标准.</li>\n</ul>\n<h2 id=\"Unicode码\"><a href=\"#Unicode码\" class=\"headerlink\" title=\"Unicode码\"></a>Unicode码</h2><p>ASCII码虽然满足了美国的需求,但是对于其它语言而言128个字符是远远不够的, 比如法语中字母上方有注音, 这是ASCII码无法表示的, 又比如汉字有10万左右, 这也是超出了ASCII码的范围, 所以后来Unicode码出现了.<br>Unicode码有着很大的容量, 现在的规模可以容纳100多万个符号, 每个符号的编码都不一样, 比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字<code>严</code>。你可以使用在线的<a href=\"https//tool.chinaz.com/Tools/unicode.aspx\">工具</a>来转换成Unicode码. </p>\n<h3 id=\"Unicode码编码方式\"><a href=\"#Unicode码编码方式\" class=\"headerlink\" title=\"Unicode码编码方式\"></a>Unicode码编码方式</h3><p>Unicode码只是定义了每个字符对应的二进制代码是什么, 但是并没有规定字符对应的二进制应该以什么样的形式存储, Unicode统一规定，每个符号用三个或四个字节表示. 比如汉字<code>严</code>的Unicode码是十六进制数4E25, 转换成二进制就是<code>100111000100101</code>一共是15位, 至少占用2个字节的空间, 而其他的字符可能有更多的二进制位数, 而之前的ASCII码是固定为8位的, 如果采取将前面多余的位数全都置0的话, 那么在存储原来的ASCII码编码的文件时就会浪费大量的空间来存储无用的0信息, 这是不可接受的. 所以如何合理的用Unicode码来兼容原先的ASCII码信息就产生出了多种具体的实现方式. </p>\n<h3 id=\"UTF-8实现Unicode\"><a href=\"#UTF-8实现Unicode\" class=\"headerlink\" title=\"UTF-8实现Unicode\"></a>UTF-8实现Unicode</h3><p>UTF-8是目前使用最多的Unicode编码实现方式, 除此之外也有 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示）实现方式, 不过基本不使用.<br>UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。<br>按照如下两条规则来编码字符:</p>\n<ol>\n<li><p>对于单(n = 1)字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p>\n</li>\n<li><p>对于多(n &gt; 1)字节的符号，第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。<br>下表总结了编码规则，字母x表示可用编码的位。</p>\n<pre><code class=\"hljs text\">Unicode符号范围     |        UTF-8编码方式\n(十六进制)        |              （二进制）\n----------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</code></pre>\n<p>在解码的时候现查看二进制的第一位, 如果是0, 那么说明是单字节的字符, 直接将该字节按照Unicode码表转换成对应的字符即可, 如果第一位是1, 那么继续查看有几个连续的1, 有n个, 则说明连续的n个字节代表一个字符.<br>以汉字<code>严</code>为例, \b<code>严</code>的Unicode码是<code>4E25</code>(二进制为<code>100111000100101</code>), 根据上表, <code>4E25</code>处于<code>0000 0800 - 0000 FFFF</code>范围, 那么<code>严</code>的编码格式就是<code>1110xxxx 10xxxxxx 10xxxxxx</code>, 也就是说<code>严</code>的UTF-8编码方式就需要占用三个字节, 我们把<code>严</code>的二进制按照顺序填到<code>x</code>的位置, 最后得到的结果就是<code>11100100 10111000 10100101</code>, 转成16进制就是<code>E4B8A5</code>, 这就是<code>严</code>的UTF-8编码结果.<br>总得来说, <code>严</code>的Unicode码为<code>4E25</code>, UTF-8编码为<code>E4B8A5</code>, 这就好比你的身份证是<code>123456</code>, 在学校站队时老师按照一定的排队方式把你编排到了<code>五组三排第二个</code>, 这两者最后的结果是可以相互转换的, 你可借助在线<a href=\"https//tool.chinaz.com/Tools/unicode.aspx\">工具</a>验证.</p>\n</li>\n</ol>\n<h2 id=\"JavaScript中的Unicode与UTF-8\"><a href=\"#JavaScript中的Unicode与UTF-8\" class=\"headerlink\" title=\"JavaScript中的Unicode与UTF-8\"></a>JavaScript中的Unicode与UTF-8</h2><p>javascript程序是使用Unicode字符集编写的, 所以我们在JavaScript中经常使用的字符或者字符串实际上内部是采用Unicode编码的, 在有些情况下, 比如我们的服务器要求接受的二进制内容的编码必须是UTF-8, 那么我们在把JavaScript中的字符串发送到服务器之前就需要进行转码, 将Unicode字符串转为UTF-8字符串. 我们在前端有时候会看到的服务器返回的json数据中乱码实际上就是因为服务器发送数据的编码跟我们客户端接受数据的编码方式不一致导致的, 你可以试着将乱码字段拷贝到在线<a href=\"https//tool.chinaz.com/Tools/unicode.aspx\">工具</a>中进行转码, 比如选择将<code>Unicode转为UTF-8</code>, 然后你就能看到正确的信息.</p>\n<p>除了数据交互之外, 浏览器的URI也是我们能够了解这种编码转换的地方, 因为URI中的querystring必须按照UTF8的编码进行传输, 但是JavaScript中是Unicode的, 如果没有中文信息还好, 因为英文字符在这两者之间的码值是保持一致的, JavaScript的字符串<code>hello</code>到了URI中也还是<code>hello</code>, 如果你不手动去转换也是ok的, 但是一旦涉及到中文(包括其它非英文字符), 比如汉字<code>严</code>, 它的Unicode码值和UTF-8码值就差的很远, 如果你不进行手动转换, 直接将JavaScript中的字符<code>严</code>丢到地址栏的URI中, 那么就会导致URI乱码, 你再想从URI中把之前放进去的<code>严</code>取出来就会发现得到的根本不是汉字<code>严</code>, 而是一串乱码.</p>\n<h2 id=\"在JavaScript中如何转换Unicode与UTF-8\"><a href=\"#在JavaScript中如何转换Unicode与UTF-8\" class=\"headerlink\" title=\"在JavaScript中如何转换Unicode与UTF-8\"></a>在JavaScript中如何转换Unicode与UTF-8</h2><ul>\n<li>浏览器提供了三对方法来进行编码转换,<code>escape/unescape</code>, <code>encodeURI/decodeURI</code>和<code>encodeURIComponent/decodeURIComponent</code>.<ol>\n<li>第一对<code>escape/unescape</code>是非标准的, <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\">已经被废弃</a></strong>, 这里只说一下它的转码方式, <code>escape</code>在处理大于127的字符时是在字符的Unicode码前面直接加上一个<code>%u</code>, 例如<code>严</code>的Unicode码为<code>4E25</code>, 那么<code>escape(&#39;严&#39;)</code>的结果就是<code>%u4E25</code>, 再次强调, <strong>请不要使用<code>escape/unescape</code>, 它已被废弃</strong>;</li>\n<li>第二对<code>encodeURI/decodeURI</code>是用来给整个URL进行转码的, 它不会转义<code>&amp;, ?, /, =</code>这样的功能字符;</li>\n<li>第三对<code>encodeURIComponent/decodeURIComponent</code>是用来给URL的部分字段进行转码的, 它会对<code>&amp;, ?, /, =</code>这些特殊字符进行转义, 一般用来处理key-value形式的query字段.<br><code>encodeURI</code>和<code>encodeURIComponent</code>都是先将非英文字符的Unicode码转为UTF-8码, 然后在每个字节前面都加上一个<code>%</code>, 比如汉字<code>严</code>的Unicode码是<code>4E25</code>, 使用<code>encodeURI</code>编码时会先转成UTF-8码<code>E4 B8 A5</code>, 在用<code>%</code>连接起来就得到最后结果<code>%E4%B8%A5</code>.<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">//编码</span>\n<span class=\"hljs-built_in\">encodeURIComponent</span>(<span class=\"hljs-string\">&#x27;严&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &#x27;%E4%B8%A5&#x27;</span>\n\n<span class=\"hljs-comment\">//解码</span>\n<span class=\"hljs-built_in\">decodeURIComponent</span>(<span class=\"hljs-string\">&#x27;%E4%B8%A5&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &#x27;严&#x27;</span>\n\n<span class=\"hljs-comment\">//encodeURI和encodeURIComponent对比</span>\n<span class=\"hljs-built_in\">encodeURI</span>(<span class=\"hljs-string\">&#x27;www.kricsleo.com?name=&quot;张三&quot;&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;www.kricsleo.com?name=%22%E5%BC%A0%E4%B8%89%22&quot;</span>\n\n<span class=\"hljs-built_in\">encodeURIComponent</span>(<span class=\"hljs-string\">&#x27;www.kricsleo.com?name=&quot;张三&quot;&#x27;</span>) <span class=\"hljs-comment\">// =&gt; &quot;www.kricsleo.com%3Fname%3D%22%E5%BC%A0%E4%B8%89%22&quot;</span></code></pre></li>\n</ol>\n</li>\n<li>我们也可以自己用js来使用Unicode和UTF-8之间的相互转换<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 将字符串格式化为UTF8编码的字节</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">const</span> toUTF8 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, isGetBytes</span>) </span>&#123;\n      <span class=\"hljs-keyword\">var</span> back = [];\n      <span class=\"hljs-keyword\">var</span> byteSize = <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length; i++) &#123;\n          <span class=\"hljs-keyword\">var</span> code = str.charCodeAt(i);\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0x00</span> &lt;= code &amp;&amp; code &lt;= <span class=\"hljs-number\">0x7f</span>) &#123;\n                byteSize += <span class=\"hljs-number\">1</span>;\n                back.push(code);\n          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0x80</span> &lt;= code &amp;&amp; code &lt;= <span class=\"hljs-number\">0x7ff</span>) &#123;\n                byteSize += <span class=\"hljs-number\">2</span>;\n                back.push((<span class=\"hljs-number\">192</span> | (<span class=\"hljs-number\">31</span> &amp; (code &gt;&gt; <span class=\"hljs-number\">6</span>))));\n                back.push((<span class=\"hljs-number\">128</span> | (<span class=\"hljs-number\">63</span> &amp; code)))\n          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-number\">0x800</span> &lt;= code &amp;&amp; code &lt;= <span class=\"hljs-number\">0xd7ff</span>) \n                  || (<span class=\"hljs-number\">0xe000</span> &lt;= code &amp;&amp; code &lt;= <span class=\"hljs-number\">0xffff</span>)) &#123;\n                byteSize += <span class=\"hljs-number\">3</span>;\n                back.push((<span class=\"hljs-number\">224</span> | (<span class=\"hljs-number\">15</span> &amp; (code &gt;&gt; <span class=\"hljs-number\">12</span>))));\n                back.push((<span class=\"hljs-number\">128</span> | (<span class=\"hljs-number\">63</span> &amp; (code &gt;&gt; <span class=\"hljs-number\">6</span>))));\n                back.push((<span class=\"hljs-number\">128</span> | (<span class=\"hljs-number\">63</span> &amp; code)))\n          &#125;\n       &#125;\n       <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; back.length; i++) &#123;\n            back[i] &amp;= <span class=\"hljs-number\">0xff</span>;\n       &#125;\n       <span class=\"hljs-keyword\">if</span> (isGetBytes) &#123;\n            <span class=\"hljs-keyword\">return</span> back\n       &#125;\n       <span class=\"hljs-keyword\">if</span> (byteSize &lt;= <span class=\"hljs-number\">0xff</span>) &#123;\n            <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">0</span>, byteSize].concat(back);\n       &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            <span class=\"hljs-keyword\">return</span> [byteSize &gt;&gt; <span class=\"hljs-number\">8</span>, byteSize &amp; <span class=\"hljs-number\">0xff</span>].concat(back);\n        &#125;\n&#125;\n\ntoUTF8(<span class=\"hljs-string\">&#x27;严&#x27;</span>); <span class=\"hljs-comment\">// =&gt;  [0, 3, 228, 184, 165]</span>\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 读取UTF8编码的字节，并转为Unicode的字符串</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">const</span> fromUTF8 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arr</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> arr === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> arr;\n    &#125;\n    <span class=\"hljs-keyword\">var</span> UTF = <span class=\"hljs-string\">&#x27;&#x27;</span>, _arr = arr;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; _arr.length; i++) &#123;\n        <span class=\"hljs-keyword\">var</span> one = _arr[i].toString(<span class=\"hljs-number\">2</span>),\n                v = one.match(<span class=\"hljs-regexp\">/^1+?(?=0)/</span>);\n        <span class=\"hljs-keyword\">if</span> (v &amp;&amp; one.length == <span class=\"hljs-number\">8</span>) &#123;\n            <span class=\"hljs-keyword\">var</span> bytesLength = v[<span class=\"hljs-number\">0</span>].length;\n            <span class=\"hljs-keyword\">var</span> store = _arr[i].toString(<span class=\"hljs-number\">2</span>).slice(<span class=\"hljs-number\">7</span> - bytesLength);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> st = <span class=\"hljs-number\">1</span>; st &lt; bytesLength; st++) &#123;\n                store += _arr[st + i].toString(<span class=\"hljs-number\">2</span>).slice(<span class=\"hljs-number\">2</span>)\n            &#125;\n            UTF += <span class=\"hljs-built_in\">String</span>.fromCharCode(<span class=\"hljs-built_in\">parseInt</span>(store, <span class=\"hljs-number\">2</span>));\n            i += bytesLength - <span class=\"hljs-number\">1</span>\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            UTF += <span class=\"hljs-built_in\">String</span>.fromCharCode(_arr[i])\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> UTF\n&#125;\n\nfromUTF8([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">228</span>, <span class=\"hljs-number\">184</span>, <span class=\"hljs-number\">165</span>]); <span class=\"hljs-comment\">// =&gt; &#x27;严&#x27;</span></code></pre>\n\n</li>\n</ul>\n<p>参考资料:</p>\n<ol>\n<li>阮一峰的博客: https//<a href=\"http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\">www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></li>\n<li>segmentfault上张亚涛的专栏: <a href=\"https://segmentfault.com/a/1190000005794963\">https://segmentfault.com/a/1190000005794963</a></li>\n</ol>","source":"_posts/unicode-utf8.md","full_source":"/Users/krics/workspace/kricsleo_site/source/_posts/unicode-utf8.md","path":"unicode-utf8/","permalink":"https://kricsleo.com/unicode-utf8/","photos":[],"link":""}