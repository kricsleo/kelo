{"title":"toLocaleString","date":"2019-04-25T02:04:25.000Z","updated":"2020-11-19T04:21:12.134Z","comments":true,"layout":"post","content":"<h1 id=\"冷门的toLocaleString\"><a href=\"#冷门的toLocaleString\" class=\"headerlink\" title=\"冷门的toLocaleString\"></a>冷门的<code>toLocaleString</code></h1><p>js 里面除了我们日常使用的api以外, 其实还是有不少大多数人都不知道的很好用的api的, <code>toLocaleString</code>算一个, 也许你在面试题中看到过用正则来实现数字千位用逗号分隔的做法, 但是如果你能直接说出<code>toLocaleString</code>, 应该是出乎面试官的意料的, 而它的用法可不止于此.</p>\n<p><code>toLocaleString</code>方法在<code>Numnber</code>和<code>Date</code>类型上都有部署, 实现的作用都是格式化数字或者日期, 返回格式化后的字符串.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Number-prototype-toLocaleString\"><a href=\"#Number-prototype-toLocaleString\" class=\"headerlink\" title=\"Number.prototype.toLocaleString\"></a><code>Number.prototype.toLocaleString</code></h2><p>api: <code>toLocaleString([locales [, options]])</code></p>\n<p><code>locales</code>指定地区, 默认是按照当前电脑环境的语言, 也可以指定不同的语言, 中文是<code>zh</code>, 英文是<code>en</code>, 其它可选项请查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">MDN</a>, 不区分大小写.</p>\n<p>例如:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> a = -<span class=\"hljs-number\">2345679.56789</span>;\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n\n<span class=\"hljs-comment\">// 单纯的数字的格式化在 zh 和 en 是相同的</span>\na.toLocalString(); <span class=\"hljs-comment\">// =&gt; &quot;-2,345,679.568&quot;</span>\na.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;-2,345,679.568&quot;</span>\na.toLocaleString(<span class=\"hljs-string\">&#x27;en&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;-2,345,679.568&quot;</span>\n\n<span class=\"hljs-comment\">// 日期的格式化就能看出语言差异了</span>\nb.toLocalString(); <span class=\"hljs-comment\">// =&gt; &quot;2019/4/25 上午10:27:15&quot;</span>\nb.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;2019/4/25 上午10:27:15&quot;</span>\nb.toLocaleString(<span class=\"hljs-string\">&#x27;en&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;4/25/2019, 10:27:15 AM&quot;</span></code></pre>\n\n<p><code>options</code>参数才是重头戏, 它可以定义更多的配置项, 但是一定要先指定<code>locales</code>参数, 才能使用<code>options</code>参数.</p>\n<p><code>options</code>对象中的<code>style</code>表示格式化时使用的格式, 默认是<code>decimal</code>即纯数字, 另外还有<code>percent</code>百分比和<code>currency</code>货币形式, 需要注意的是如果指定<code>style</code>为<code>currency</code>, 那么必须接着指定<code>currency</code>属性才行, 因为<code>currency</code>没有默认值, 可选值有<code>CNY</code>人民币, <code>USD</code>美元, <code>EUR</code>欧元等, 更多请参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\">MDN</a></p>\n<p>指定了<code>style</code>为<code>currency</code>之后, 除了<code>currency</code>属性之外, 还有一个<code>currencyDisplay</code>属性可用, 默认值是<code>symbol</code>即货币符号, 另外两个可选值为<code>code</code>代码(如<code>CNY</code>)和<code>name</code>名称(如<code>人民币</code>)</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-number\">80909.89</span>;\nc.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;percent&#x27;</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;8,090,989%&quot; </span>\nc.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;currency&#x27;</span>, <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&#x27;CNY&#x27;</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;￥80,909.89&quot;</span>\nc.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;currency&#x27;</span>, <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&#x27;CNY&#x27;</span>, <span class=\"hljs-attr\">currencyDisplay</span>: <span class=\"hljs-string\">&#x27;name&#x27;</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;80,909.89 人民币&quot;</span></code></pre>\n\n<p>接下来是<code>options</code>里面的两组不能同时使用的参数, 一组是<code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>和<code>maximumFractionDigits</code>, 另一组是<code>minimumSignificantDigits</code>和<code>maximumSignificantDigits</code></p>\n<p>前一组是用来指定数字的最少整数位数, 最少小数位数和最多小数位数, 后一组用来指定最少数字位数和最多数字位数(包括整数和小数一起). 如果指定了后一组参数, 那么前一组参数就会被忽略掉. 指定位数的规则都是按照四舍五入, 是真正的数学上的四舍五入, 而不是像<code>toFixed</code>那样的按照银行家算法的伪四舍五入, 如果位数不足的话就会自动用<code>0</code>补齐. <strong>四舍五入</strong>, <strong>自动补齐</strong>, 想想就知道有多大潜力! </p>\n<p>另外<code>style</code>里面还有一个<code>useGrouping</code>参数, 表示是否使用分组分隔符，如千位分隔符或千/万/亿分隔符, 默认为<code>true</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> d = <span class=\"hljs-number\">892839.855</span>;\n\nd.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123; <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;currency&#x27;</span>, <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&#x27;CNY&#x27;</span> ,<span class=\"hljs-attr\">minimumFractionDigits</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">maximumFractionDigits</span>:<span class=\"hljs-number\">2</span> &#125;); <span class=\"hljs-comment\">// =&gt; &quot;￥892,839.86&quot;</span>\nd.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123; <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;currency&#x27;</span>, <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&#x27;CNY&#x27;</span> ,<span class=\"hljs-attr\">minimumFractionDigits</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">maximumFractionDigits</span>:<span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">useGrouping</span>: <span class=\"hljs-literal\">false</span> &#125;); <span class=\"hljs-comment\">// =&gt; &quot;￥892839.86&quot;</span></code></pre>\n\n<p>看看上面的金额格式化的示例, 只需要一行语句多简洁啊, 我之前还专门写了个函数来做金额的格式化显示, 跟这个一比差远了…</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span>: format money to standard string including prefix, separator and two decimal places</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;number | string&#125;</span> <span class=\"hljs-variable\">currency</span></span></span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;string&#125;</span> </span>prefix prefix the output with the specified string</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span>: &#123;string&#125; formated currency</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatCurrency</span>(<span class=\"hljs-params\">currency = <span class=\"hljs-string\">&#x27;&#x27;</span>, prefix = <span class=\"hljs-string\">&#x27;&#x27;</span></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> split = currency.toString().split(<span class=\"hljs-string\">&#x27;.&#x27;</span>);\n  <span class=\"hljs-keyword\">let</span> integer = split[<span class=\"hljs-number\">0</span>] || <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n  <span class=\"hljs-keyword\">if</span> (integer.startsWith(<span class=\"hljs-string\">&#x27;¥&#x27;</span>)) &#123;\n    integer = integer.slice(<span class=\"hljs-number\">1</span>, integer.length);\n  &#125;\n  <span class=\"hljs-keyword\">let</span> isNegative = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">integer.startsWith(<span class=\"hljs-string\">&#x27;-&#x27;</span>)</span>)</span> &#123;\n    isNegative = <span class=\"hljs-literal\">true</span>;\n    integer = integer.slice(<span class=\"hljs-number\">1</span>, integer.length);\n  &#125;\n  <span class=\"hljs-keyword\">let</span> decimal = split[<span class=\"hljs-number\">1</span>] || <span class=\"hljs-string\">&#x27;00&#x27;</span>;\n  <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-keyword\">while</span> (integer.length &gt; <span class=\"hljs-number\">3</span>) &#123;\n    output = <span class=\"hljs-string\">`,<span class=\"hljs-subst\">$&#123;integer.slice(-<span class=\"hljs-number\">3</span>)&#125;</span><span class=\"hljs-subst\">$&#123;output&#125;</span>`</span>;\n    integer = integer.slice(<span class=\"hljs-number\">0</span>, integer.length - <span class=\"hljs-number\">3</span>);\n  &#125;\n  <span class=\"hljs-keyword\">if</span> (integer) &#123;\n    output = integer + output;\n  &#125;\n  <span class=\"hljs-keyword\">if</span> (decimal.length &lt; <span class=\"hljs-number\">2</span>) &#123;\n    decimal = decimal + <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n  &#125;\n  output = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;isNegative ? <span class=\"hljs-string\">&#x27;-&#x27;</span> : <span class=\"hljs-string\">&#x27;&#x27;</span>&#125;</span><span class=\"hljs-subst\">$&#123;prefix&#125;</span><span class=\"hljs-subst\">$&#123;output&#125;</span>.<span class=\"hljs-subst\">$&#123;decimal&#125;</span>`</span>;\n  <span class=\"hljs-keyword\">return</span> output;\n&#125;</code></pre>\n\n<h2 id=\"Date-prototype-toLocaleString\"><a href=\"#Date-prototype-toLocaleString\" class=\"headerlink\" title=\"Date.prototype.toLocaleString\"></a><code>Date.prototype.toLocaleString</code></h2><p>api: <code>toLocaleString([locales [, options]])</code></p>\n<p><code>locales</code>参数与之前的一致, 也是指定语言, 默认是当前电脑环境语言</p>\n<p><code>options</code>参数就不一样了, 里面的<code>hour12</code>表示使用十二小时制还是二十四小时制, 默认值根据当前环境变化而变化</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> e = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n\ne.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">hour12</span>: <span class=\"hljs-literal\">true</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;2019/4/25 下午11:07:32&quot;</span>\ne.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">hour12</span>: <span class=\"hljs-literal\">false</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;2019/4/25 23:07:32&quot;</span></code></pre>\n\n<p>然后是对年月日星期时分秒时区等的显示格式设置, 参数分别是<code>year</code>, <code>month</code>, <code>day</code>, <code>weekday</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>timeZoneName</code>.</p>\n<p><code>weekday</code>可选值为<code>narrow</code>, <code>short</code>和<code>long</code>, 就是缩写的长度不同, 例如 Wednesday 依次显示为 W , Wed 和 Wednesday<br><code>timeZoneName</code>可选值为<code>short</code>和<code>long</code>, 例如 GMT+8 和 中国标准时间<br>其余的参数可选值为<code>numeric</code>和<code>2-digit</code>, 区别是<code>numeric</code>直接显示, <code>2-digit</code>会固定显示两位数, 例如 7 和 07<br><code>month</code>除了<code>numeric</code>和<code>2-digit</code>外还有<code>narrow</code>, <code>short</code>和<code>long</code>, 额外的这三个其实也是控制缩写的长度(设置<code>locales</code>为<code>en</code>能看出差别)</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\">Number​.prototype​.toLocale​String()</a><br><a href=\"https://juejin.im/post/5ac7079f5188255c637b3233\">toLocaleString 了解一下</a></p>\n","excerpt":"<h1 id=\"冷门的toLocaleString\"><a href=\"#冷门的toLocaleString\" class=\"headerlink\" title=\"冷门的toLocaleString\"></a>冷门的<code>toLocaleString</code></h1><p>js 里面除了我们日常使用的api以外, 其实还是有不少大多数人都不知道的很好用的api的, <code>toLocaleString</code>算一个, 也许你在面试题中看到过用正则来实现数字千位用逗号分隔的做法, 但是如果你能直接说出<code>toLocaleString</code>, 应该是出乎面试官的意料的, 而它的用法可不止于此.</p>\n<p><code>toLocaleString</code>方法在<code>Numnber</code>和<code>Date</code>类型上都有部署, 实现的作用都是格式化数字或者日期, 返回格式化后的字符串.</p>","more":"<h2 id=\"Number-prototype-toLocaleString\"><a href=\"#Number-prototype-toLocaleString\" class=\"headerlink\" title=\"Number.prototype.toLocaleString\"></a><code>Number.prototype.toLocaleString</code></h2><p>api: <code>toLocaleString([locales [, options]])</code></p>\n<p><code>locales</code>指定地区, 默认是按照当前电脑环境的语言, 也可以指定不同的语言, 中文是<code>zh</code>, 英文是<code>en</code>, 其它可选项请查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">MDN</a>, 不区分大小写.</p>\n<p>例如:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> a = -<span class=\"hljs-number\">2345679.56789</span>;\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n\n<span class=\"hljs-comment\">// 单纯的数字的格式化在 zh 和 en 是相同的</span>\na.toLocalString(); <span class=\"hljs-comment\">// =&gt; &quot;-2,345,679.568&quot;</span>\na.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;-2,345,679.568&quot;</span>\na.toLocaleString(<span class=\"hljs-string\">&#x27;en&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;-2,345,679.568&quot;</span>\n\n<span class=\"hljs-comment\">// 日期的格式化就能看出语言差异了</span>\nb.toLocalString(); <span class=\"hljs-comment\">// =&gt; &quot;2019/4/25 上午10:27:15&quot;</span>\nb.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;2019/4/25 上午10:27:15&quot;</span>\nb.toLocaleString(<span class=\"hljs-string\">&#x27;en&#x27;</span>); <span class=\"hljs-comment\">// =&gt; &quot;4/25/2019, 10:27:15 AM&quot;</span></code></pre>\n\n<p><code>options</code>参数才是重头戏, 它可以定义更多的配置项, 但是一定要先指定<code>locales</code>参数, 才能使用<code>options</code>参数.</p>\n<p><code>options</code>对象中的<code>style</code>表示格式化时使用的格式, 默认是<code>decimal</code>即纯数字, 另外还有<code>percent</code>百分比和<code>currency</code>货币形式, 需要注意的是如果指定<code>style</code>为<code>currency</code>, 那么必须接着指定<code>currency</code>属性才行, 因为<code>currency</code>没有默认值, 可选值有<code>CNY</code>人民币, <code>USD</code>美元, <code>EUR</code>欧元等, 更多请参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\">MDN</a></p>\n<p>指定了<code>style</code>为<code>currency</code>之后, 除了<code>currency</code>属性之外, 还有一个<code>currencyDisplay</code>属性可用, 默认值是<code>symbol</code>即货币符号, 另外两个可选值为<code>code</code>代码(如<code>CNY</code>)和<code>name</code>名称(如<code>人民币</code>)</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-number\">80909.89</span>;\nc.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;percent&#x27;</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;8,090,989%&quot; </span>\nc.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;currency&#x27;</span>, <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&#x27;CNY&#x27;</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;￥80,909.89&quot;</span>\nc.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;currency&#x27;</span>, <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&#x27;CNY&#x27;</span>, <span class=\"hljs-attr\">currencyDisplay</span>: <span class=\"hljs-string\">&#x27;name&#x27;</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;80,909.89 人民币&quot;</span></code></pre>\n\n<p>接下来是<code>options</code>里面的两组不能同时使用的参数, 一组是<code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>和<code>maximumFractionDigits</code>, 另一组是<code>minimumSignificantDigits</code>和<code>maximumSignificantDigits</code></p>\n<p>前一组是用来指定数字的最少整数位数, 最少小数位数和最多小数位数, 后一组用来指定最少数字位数和最多数字位数(包括整数和小数一起). 如果指定了后一组参数, 那么前一组参数就会被忽略掉. 指定位数的规则都是按照四舍五入, 是真正的数学上的四舍五入, 而不是像<code>toFixed</code>那样的按照银行家算法的伪四舍五入, 如果位数不足的话就会自动用<code>0</code>补齐. <strong>四舍五入</strong>, <strong>自动补齐</strong>, 想想就知道有多大潜力! </p>\n<p>另外<code>style</code>里面还有一个<code>useGrouping</code>参数, 表示是否使用分组分隔符，如千位分隔符或千/万/亿分隔符, 默认为<code>true</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> d = <span class=\"hljs-number\">892839.855</span>;\n\nd.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123; <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;currency&#x27;</span>, <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&#x27;CNY&#x27;</span> ,<span class=\"hljs-attr\">minimumFractionDigits</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">maximumFractionDigits</span>:<span class=\"hljs-number\">2</span> &#125;); <span class=\"hljs-comment\">// =&gt; &quot;￥892,839.86&quot;</span>\nd.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123; <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;currency&#x27;</span>, <span class=\"hljs-attr\">currency</span>: <span class=\"hljs-string\">&#x27;CNY&#x27;</span> ,<span class=\"hljs-attr\">minimumFractionDigits</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">maximumFractionDigits</span>:<span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">useGrouping</span>: <span class=\"hljs-literal\">false</span> &#125;); <span class=\"hljs-comment\">// =&gt; &quot;￥892839.86&quot;</span></code></pre>\n\n<p>看看上面的金额格式化的示例, 只需要一行语句多简洁啊, 我之前还专门写了个函数来做金额的格式化显示, 跟这个一比差远了…</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@description</span>: format money to standard string including prefix, separator and two decimal places</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;number | string&#125;</span> <span class=\"hljs-variable\">currency</span></span></span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;string&#125;</span> </span>prefix prefix the output with the specified string</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span>: &#123;string&#125; formated currency</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatCurrency</span>(<span class=\"hljs-params\">currency = <span class=\"hljs-string\">&#x27;&#x27;</span>, prefix = <span class=\"hljs-string\">&#x27;&#x27;</span></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> split = currency.toString().split(<span class=\"hljs-string\">&#x27;.&#x27;</span>);\n  <span class=\"hljs-keyword\">let</span> integer = split[<span class=\"hljs-number\">0</span>] || <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n  <span class=\"hljs-keyword\">if</span> (integer.startsWith(<span class=\"hljs-string\">&#x27;¥&#x27;</span>)) &#123;\n    integer = integer.slice(<span class=\"hljs-number\">1</span>, integer.length);\n  &#125;\n  <span class=\"hljs-keyword\">let</span> isNegative = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">integer.startsWith(<span class=\"hljs-string\">&#x27;-&#x27;</span>)</span>)</span> &#123;\n    isNegative = <span class=\"hljs-literal\">true</span>;\n    integer = integer.slice(<span class=\"hljs-number\">1</span>, integer.length);\n  &#125;\n  <span class=\"hljs-keyword\">let</span> decimal = split[<span class=\"hljs-number\">1</span>] || <span class=\"hljs-string\">&#x27;00&#x27;</span>;\n  <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-keyword\">while</span> (integer.length &gt; <span class=\"hljs-number\">3</span>) &#123;\n    output = <span class=\"hljs-string\">`,<span class=\"hljs-subst\">$&#123;integer.slice(-<span class=\"hljs-number\">3</span>)&#125;</span><span class=\"hljs-subst\">$&#123;output&#125;</span>`</span>;\n    integer = integer.slice(<span class=\"hljs-number\">0</span>, integer.length - <span class=\"hljs-number\">3</span>);\n  &#125;\n  <span class=\"hljs-keyword\">if</span> (integer) &#123;\n    output = integer + output;\n  &#125;\n  <span class=\"hljs-keyword\">if</span> (decimal.length &lt; <span class=\"hljs-number\">2</span>) &#123;\n    decimal = decimal + <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n  &#125;\n  output = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;isNegative ? <span class=\"hljs-string\">&#x27;-&#x27;</span> : <span class=\"hljs-string\">&#x27;&#x27;</span>&#125;</span><span class=\"hljs-subst\">$&#123;prefix&#125;</span><span class=\"hljs-subst\">$&#123;output&#125;</span>.<span class=\"hljs-subst\">$&#123;decimal&#125;</span>`</span>;\n  <span class=\"hljs-keyword\">return</span> output;\n&#125;</code></pre>\n\n<h2 id=\"Date-prototype-toLocaleString\"><a href=\"#Date-prototype-toLocaleString\" class=\"headerlink\" title=\"Date.prototype.toLocaleString\"></a><code>Date.prototype.toLocaleString</code></h2><p>api: <code>toLocaleString([locales [, options]])</code></p>\n<p><code>locales</code>参数与之前的一致, 也是指定语言, 默认是当前电脑环境语言</p>\n<p><code>options</code>参数就不一样了, 里面的<code>hour12</code>表示使用十二小时制还是二十四小时制, 默认值根据当前环境变化而变化</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> e = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n\ne.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">hour12</span>: <span class=\"hljs-literal\">true</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;2019/4/25 下午11:07:32&quot;</span>\ne.toLocaleString(<span class=\"hljs-string\">&#x27;zh&#x27;</span>, &#123;<span class=\"hljs-attr\">hour12</span>: <span class=\"hljs-literal\">false</span>&#125;); <span class=\"hljs-comment\">// =&gt; &quot;2019/4/25 23:07:32&quot;</span></code></pre>\n\n<p>然后是对年月日星期时分秒时区等的显示格式设置, 参数分别是<code>year</code>, <code>month</code>, <code>day</code>, <code>weekday</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>timeZoneName</code>.</p>\n<p><code>weekday</code>可选值为<code>narrow</code>, <code>short</code>和<code>long</code>, 就是缩写的长度不同, 例如 Wednesday 依次显示为 W , Wed 和 Wednesday<br><code>timeZoneName</code>可选值为<code>short</code>和<code>long</code>, 例如 GMT+8 和 中国标准时间<br>其余的参数可选值为<code>numeric</code>和<code>2-digit</code>, 区别是<code>numeric</code>直接显示, <code>2-digit</code>会固定显示两位数, 例如 7 和 07<br><code>month</code>除了<code>numeric</code>和<code>2-digit</code>外还有<code>narrow</code>, <code>short</code>和<code>long</code>, 额外的这三个其实也是控制缩写的长度(设置<code>locales</code>为<code>en</code>能看出差别)</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\">Number​.prototype​.toLocale​String()</a><br><a href=\"https://juejin.im/post/5ac7079f5188255c637b3233\">toLocaleString 了解一下</a></p>","source":"_posts/toLocaleString.md","full_source":"/Users/krics/workspace/kricsleo_site/source/_posts/toLocaleString.md","path":"toLocaleString/","permalink":"https://kricsleo.com/toLocaleString/","photos":[],"link":""}