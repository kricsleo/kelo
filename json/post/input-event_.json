{"title":"input-event","date":"2019-04-22T03:14:00.000Z","updated":"2020-11-19T04:21:11.391Z","comments":true,"layout":"post","content":"<h1 id=\"input-元素的事件顺序\"><a href=\"#input-元素的事件顺序\" class=\"headerlink\" title=\"input 元素的事件顺序\"></a>input 元素的事件顺序</h1><p>h5 的<code>&lt;input /&gt;</code>组件上有很多的事件, 这次来详细的探究一下它们的触发顺序和使用场景</p>\n<a id=\"more\"></a>\n\n<p>我的测试是在 chrome 版本 73.0.3683.75（正式版本）（64 位）环境, 其它的浏览器可能有不同, 有时间再补充其它浏览器吧.</p>\n<p>目前来说比较常用的有<code>focus</code>/<code>keydown</code>/<code>input</code>/<code>keyup</code>/<code>compositionstart</code>/<code>compositionupdate</code>/<code>compositionend</code>/<code>change</code> </p>\n<p>点击一个输入框开始输入触发的事件顺序依次是: </p>\n<p><code>focus</code>=&gt;<code>keydown</code>(=&gt;<code>compositionstart</code>=&gt;<code>compositionupdate</code>)=&gt;<code>input</code>(=&gt;<code>compositionend</code>)=&gt;<code>keyup</code>  </p>\n<p> 如果是组合输入(比如中文日文等)输入的话就会出现括号中组合输入事件, 详细来说是当开始输入中文的时候就会触发<code>compositionstart</code>事件, 此时<code>input</code>事件和<code>keyup</code>事件拿到的输入框的值是不完整的(一般包含你输入的拼音和拼音之间的分号), 当中文输入结束的时候会触发<code>compositionend</code>事件, 此时可以取到该输入框的完整的输入中文后的值(一般而言这个值是我们所需要的)</p>\n<p> (额外的一点是从<code>input</code>事件开始可以拿到最新输入的值, 前面的事件拿到的值都要落后一次, 少了最后一次输入的字符)</p>\n<p><code>change</code>事件的触发需要<strong>两个条件</strong>, 一是<code>input</code>元素即将失焦, 事件顺序是<code>change</code>=&gt;<code>blur</code>, 二是本次失焦后的内容与前一次失焦后的内容不同(如果相同是不会触发该事件的),</p>\n<p>最常用的场景之一是<code>input</code>用来搜索的时候, 我们的需求是输入变化的时候就去查询(当然有节流), 但是在中文输入的时候就不要查询, 直到中文输入结束之后再查询, 这样可以避免用一些明显无效的关键词如<code>文章n&#39;r</code>去查询, 等到完整中文输入后变成<code>文章内容</code>再去查询</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">fn, minDelay, maxDelay</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> timer;\n  <span class=\"hljs-keyword\">let</span> startTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">const</span> args = <span class=\"hljs-built_in\">arguments</span>;\n    <span class=\"hljs-keyword\">let</span> curTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n    <span class=\"hljs-built_in\">clearTimeout</span>(timer);\n    <span class=\"hljs-keyword\">if</span> (curTime - startTime &gt;= maxDelay) &#123;\n      fn.apply(context, args);\n      startTime = curTime;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n        fn.apply(context, args);\n      &#125;, minDelay);\n    &#125;\n  &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">listenInput</span>(<span class=\"hljs-params\">selector, cb, delay = <span class=\"hljs-number\">150</span>, maxDelay = <span class=\"hljs-number\">1000</span></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-built_in\">document</span>.querySelector(selector);\n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!el || !cb || <span class=\"hljs-keyword\">typeof</span> cb !== <span class=\"hljs-string\">&#x27;function&#x27;</span></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  &#125;\n  <span class=\"hljs-keyword\">const</span> throttleCB = throttle(cb, delay, maxDelay);\n  <span class=\"hljs-keyword\">let</span> isComposition = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">const</span> compositionstart = <span class=\"hljs-function\">() =&gt;</span> isComposition = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">const</span> compositionend = <span class=\"hljs-function\">() =&gt;</span> &#123;\n    isComposition = <span class=\"hljs-literal\">false</span>;\n    throttleCB(el.value);\n  &#125;;\n  <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">isComposition</span>)</span> &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    &#125;\n    throttleCB(el.value);\n  &#125;\n\n  el.addEventListener(<span class=\"hljs-string\">&#x27;compositionstart&#x27;</span>, compositionstart);\n  el.addEventListener(<span class=\"hljs-string\">&#x27;compositionend&#x27;</span>, compositionend);\n  el.addEventListener(<span class=\"hljs-string\">&#x27;input&#x27;</span>, input);\n  \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;\n    el.removeEventListener(<span class=\"hljs-string\">&#x27;compositionstart&#x27;</span>, compositionstart);\n    el.removeEventListener(<span class=\"hljs-string\">&#x27;compositionend&#x27;</span>, compositionend);\n    el.removeEventListener(<span class=\"hljs-string\">&#x27;input&#x27;</span>, input);\n  &#125;\n&#125;\n\n<span class=\"hljs-comment\">// 使用示例</span>\n<span class=\"hljs-comment\">// 开始监听, 默认最小间隔时间是150ms, 最大间隔时间是1000ms</span>\n<span class=\"hljs-keyword\">const</span> removeListener = listenInput(<span class=\"hljs-string\">&#x27;#inputId&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1500</span>);\n\n<span class=\"hljs-comment\">// 取消监听</span>\nremoveListener();</code></pre>\n","excerpt":"<h1 id=\"input-元素的事件顺序\"><a href=\"#input-元素的事件顺序\" class=\"headerlink\" title=\"input 元素的事件顺序\"></a>input 元素的事件顺序</h1><p>h5 的<code>&lt;input /&gt;</code>组件上有很多的事件, 这次来详细的探究一下它们的触发顺序和使用场景</p>","more":"<p>我的测试是在 chrome 版本 73.0.3683.75（正式版本）（64 位）环境, 其它的浏览器可能有不同, 有时间再补充其它浏览器吧.</p>\n<p>目前来说比较常用的有<code>focus</code>/<code>keydown</code>/<code>input</code>/<code>keyup</code>/<code>compositionstart</code>/<code>compositionupdate</code>/<code>compositionend</code>/<code>change</code> </p>\n<p>点击一个输入框开始输入触发的事件顺序依次是: </p>\n<p><code>focus</code>=&gt;<code>keydown</code>(=&gt;<code>compositionstart</code>=&gt;<code>compositionupdate</code>)=&gt;<code>input</code>(=&gt;<code>compositionend</code>)=&gt;<code>keyup</code>  </p>\n<p> 如果是组合输入(比如中文日文等)输入的话就会出现括号中组合输入事件, 详细来说是当开始输入中文的时候就会触发<code>compositionstart</code>事件, 此时<code>input</code>事件和<code>keyup</code>事件拿到的输入框的值是不完整的(一般包含你输入的拼音和拼音之间的分号), 当中文输入结束的时候会触发<code>compositionend</code>事件, 此时可以取到该输入框的完整的输入中文后的值(一般而言这个值是我们所需要的)</p>\n<p> (额外的一点是从<code>input</code>事件开始可以拿到最新输入的值, 前面的事件拿到的值都要落后一次, 少了最后一次输入的字符)</p>\n<p><code>change</code>事件的触发需要<strong>两个条件</strong>, 一是<code>input</code>元素即将失焦, 事件顺序是<code>change</code>=&gt;<code>blur</code>, 二是本次失焦后的内容与前一次失焦后的内容不同(如果相同是不会触发该事件的),</p>\n<p>最常用的场景之一是<code>input</code>用来搜索的时候, 我们的需求是输入变化的时候就去查询(当然有节流), 但是在中文输入的时候就不要查询, 直到中文输入结束之后再查询, 这样可以避免用一些明显无效的关键词如<code>文章n&#39;r</code>去查询, 等到完整中文输入后变成<code>文章内容</code>再去查询</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">fn, minDelay, maxDelay</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> timer;\n  <span class=\"hljs-keyword\">let</span> startTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">const</span> args = <span class=\"hljs-built_in\">arguments</span>;\n    <span class=\"hljs-keyword\">let</span> curTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n    <span class=\"hljs-built_in\">clearTimeout</span>(timer);\n    <span class=\"hljs-keyword\">if</span> (curTime - startTime &gt;= maxDelay) &#123;\n      fn.apply(context, args);\n      startTime = curTime;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n        fn.apply(context, args);\n      &#125;, minDelay);\n    &#125;\n  &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">listenInput</span>(<span class=\"hljs-params\">selector, cb, delay = <span class=\"hljs-number\">150</span>, maxDelay = <span class=\"hljs-number\">1000</span></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-built_in\">document</span>.querySelector(selector);\n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!el || !cb || <span class=\"hljs-keyword\">typeof</span> cb !== <span class=\"hljs-string\">&#x27;function&#x27;</span></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  &#125;\n  <span class=\"hljs-keyword\">const</span> throttleCB = throttle(cb, delay, maxDelay);\n  <span class=\"hljs-keyword\">let</span> isComposition = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">const</span> compositionstart = <span class=\"hljs-function\">() =&gt;</span> isComposition = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">const</span> compositionend = <span class=\"hljs-function\">() =&gt;</span> &#123;\n    isComposition = <span class=\"hljs-literal\">false</span>;\n    throttleCB(el.value);\n  &#125;;\n  <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">isComposition</span>)</span> &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    &#125;\n    throttleCB(el.value);\n  &#125;\n\n  el.addEventListener(<span class=\"hljs-string\">&#x27;compositionstart&#x27;</span>, compositionstart);\n  el.addEventListener(<span class=\"hljs-string\">&#x27;compositionend&#x27;</span>, compositionend);\n  el.addEventListener(<span class=\"hljs-string\">&#x27;input&#x27;</span>, input);\n  \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;\n    el.removeEventListener(<span class=\"hljs-string\">&#x27;compositionstart&#x27;</span>, compositionstart);\n    el.removeEventListener(<span class=\"hljs-string\">&#x27;compositionend&#x27;</span>, compositionend);\n    el.removeEventListener(<span class=\"hljs-string\">&#x27;input&#x27;</span>, input);\n  &#125;\n&#125;\n\n<span class=\"hljs-comment\">// 使用示例</span>\n<span class=\"hljs-comment\">// 开始监听, 默认最小间隔时间是150ms, 最大间隔时间是1000ms</span>\n<span class=\"hljs-keyword\">const</span> removeListener = listenInput(<span class=\"hljs-string\">&#x27;#inputId&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1500</span>);\n\n<span class=\"hljs-comment\">// 取消监听</span>\nremoveListener();</code></pre>","source":"_posts/input-event.md","full_source":"/Users/krics/workspace/kricsleo_site/source/_posts/input-event.md","path":"input-event/","permalink":"https://kricsleo.com/input-event/","photos":[],"link":""}