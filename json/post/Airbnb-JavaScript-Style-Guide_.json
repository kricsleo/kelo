{"title":"Airbnb-JavaScript-Style-Guide","date":"2018-09-05T01:55:28.000Z","updated":"2020-11-19T04:21:11.050Z","comments":true,"layout":"post","content":"<h1 id=\"Airbnb-JavaScript-Style-Guide-阅读笔记\"><a href=\"#Airbnb-JavaScript-Style-Guide-阅读笔记\" class=\"headerlink\" title=\"Airbnb JavaScript Style Guide 阅读笔记\"></a>Airbnb JavaScript Style Guide 阅读笔记</h1><p>Airbnb的JavaScript代码风格是世界上最流行的JavaScript代码风格之一, 在阅读的时候结合我自己的使用经验记录如下重点, 日后多次阅读应该会持续更新.<br>在线阅读地址: <a href=\"https://github.com/airbnb/javascript\">https://github.com/airbnb/javascript</a><br>(中文翻译版: <a href=\"https://github.com/yuche/javascript\">https://github.com/yuche/javascript</a>)</p>\n<a id=\"more\"></a>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><ol>\n<li>使用字面值创建对象<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> item = &#123;&#125;;</code></pre></li>\n<li>使用对象方法的简写<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> atom = &#123;\n  value: <span class=\"hljs-number\">1</span>,\n\n  addValue: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> atom.value + value;\n  &#125;,\n&#125;;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> atom = &#123;\n  value: <span class=\"hljs-number\">1</span>,\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">addValue</span>(<span class=\"hljs-params\">value</span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> atom.value + value;\n  &#125;,\n&#125;;</code></pre>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2></li>\n<li>使用字面值创建数组<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> items = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>();\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> items = [];</code></pre></li>\n<li>使用扩展运算符<code>...</code>复制数组<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> len = items.length;\n<span class=\"hljs-keyword\">const</span> itemsCopy = [];\n<span class=\"hljs-keyword\">let</span> i;\n\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) &#123;\n  itemsCopy[i] = items[i];\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> itemsCopy = [...items];</code></pre></li>\n<li>使用Array#from把类数组对象转为数组<pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;.foo&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> nodes = <span class=\"hljs-built_in\">Array</span>.from(foo);</code></pre>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2></li>\n<li>使用解构存取和使用多属性对象<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\">user</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> firstName = user.firstName;\n  <span class=\"hljs-keyword\">const</span> lastName = user.lastName;\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;firstName&#125;</span> <span class=\"hljs-subst\">$&#123;lastName&#125;</span>`</span>;\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> &#123; firstName, lastName &#125; = obj;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;firstName&#125;</span> <span class=\"hljs-subst\">$&#123;lastName&#125;</span>`</span>;\n&#125;\n\n<span class=\"hljs-comment\">// best</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\">&#123; firstName, lastName &#125;</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;firstName&#125;</span> <span class=\"hljs-subst\">$&#123;lastName&#125;</span>`</span>;\n&#125;</code></pre></li>\n<li>对数组使用解构赋值<pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> first = arr[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">const</span> second = arr[<span class=\"hljs-number\">1</span>];\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> [first, second] = arr;</code></pre></li>\n<li>回传对个对象时, 使用对象解构, 而不是数组解构<blockquote>\n<p>为什么？增加属性或者改变排序不会改变调用时的位置。</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processInput</span>(<span class=\"hljs-params\">input</span>) </span>&#123;\n  <span class=\"hljs-comment\">// then a miracle occurs</span>\n  <span class=\"hljs-keyword\">return</span> [left, right, top, bottom];\n&#125;\n\n<span class=\"hljs-comment\">// 调用时需要考虑回调数据的顺序。</span>\n<span class=\"hljs-keyword\">const</span> [left, __, top] = processInput(input);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processInput</span>(<span class=\"hljs-params\">input</span>) </span>&#123;\n  <span class=\"hljs-comment\">// then a miracle occurs</span>\n  <span class=\"hljs-keyword\">return</span> &#123; left, right, top, bottom &#125;;\n&#125;\n\n<span class=\"hljs-comment\">// 调用时只选择需要的数据</span>\n<span class=\"hljs-keyword\">const</span> &#123; left, right &#125; = processInput(input);</code></pre>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2></li>\n<li>程序化生成字符串时使用模板字符串代替字符串连接<blockquote>\n<p>模板字符串更简洁, 根据可读性</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">name</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;How are you, &#x27;</span> + name + <span class=\"hljs-string\">&#x27;?&#x27;</span>;\n&#125;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">name</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&#x27;How are you, &#x27;</span>, name, <span class=\"hljs-string\">&#x27;?&#x27;</span>].join();\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">name</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`How are you, <span class=\"hljs-subst\">$&#123;name&#125;</span>?`</span>;</code></pre>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2></li>\n<li>使用函数声明代替函数表达式<blockquote>\n<p>因为函数声明是可命名的, 所以他们在调用栈中更容易\b被识别.<br>此外函数声明会把整个函数提升(hoisted), 而函数表达式只会把函数的引用变量名提升. 这条规则是的箭头函数可以取代函数表达式.</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n&#125;;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n&#125;</code></pre></li>\n<li>函数表达式<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// 立即调用的函数表达式(IIFE)</span>\n(<span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;welcome!&#x27;</span>)\n&#125;)()</code></pre></li>\n<li>不要使用<code>arguments</code>。可以选择<code>rest</code>语法<code>...</code>替代<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">concatenateAll</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n  <span class=\"hljs-keyword\">return</span> args.join(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">concatenateAll</span>(<span class=\"hljs-params\">...args</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> args.join(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n&#125;</code></pre></li>\n<li>直接给函数的参数指定默认值，不要使用一个变化的函数参数。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// really bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleThings</span>(<span class=\"hljs-params\">opts</span>) </span>&#123;\n  <span class=\"hljs-comment\">// 不！我们不应该改变函数参数。</span>\n  <span class=\"hljs-comment\">// 更加糟糕: 如果参数 opts 是 false 的话，它就会被设定为一个对象。</span>\n  <span class=\"hljs-comment\">// 但这样的写法会造成一些 Bugs。</span>\n  <span class=\"hljs-comment\">//（译注：例如当 opts 被赋值为空字符串，opts 仍然会被下一行代码设定为一个空对象。）</span>\n  opts = opts || &#123;&#125;;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n\n<span class=\"hljs-comment\">// still bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleThings</span>(<span class=\"hljs-params\">opts</span>) </span>&#123;\n  <span class=\"hljs-keyword\">if</span> (opts === <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>) &#123;\n    opts = &#123;&#125;;\n  &#125;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleThings</span>(<span class=\"hljs-params\">opts = &#123;&#125;</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2></li>\n<li>总是使用<code>class</code>, 避免使用<code>prototype</code><blockquote>\n<p>因为<code>class</code>语法更易读</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Queen</span>(<span class=\"hljs-params\">contents = []</span>) </span>&#123;\n    <span class=\"hljs-built_in\">this</span>._quene = [...contents];\n&#125;\nQuene.prototype.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-built_in\">this</span>._quene[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-built_in\">this</span>._quene.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">return</span> value;\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queen</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">contents = []</span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>._quene = [...contents];\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-built_in\">this</span>._quene[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-built_in\">this</span>._quene.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">return</span> value;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"Iterators-and-Generators\"><a href=\"#Iterators-and-Generators\" class=\"headerlink\" title=\"Iterators and Generators\"></a>Iterators and Generators</h2></li>\n<li>不要使用<code>iterators</code>, 使用高阶函数如<code>map</code>或者<code>reduce</code>来代替<code>for-of</code><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> num <span class=\"hljs-keyword\">of</span> numbers) &#123;\n  sum += num;\n&#125;\n\nsum === <span class=\"hljs-number\">15</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\nnumbers.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">num</span>) =&gt;</span> sum += num);\nsum === <span class=\"hljs-number\">15</span>\n\n<span class=\"hljs-comment\">// best (use the functional force)</span>\n<span class=\"hljs-keyword\">const</span> sum = numbers.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">total, num</span>) =&gt;</span> total += num, <span class=\"hljs-number\">0</span>)\nsum === <span class=\"hljs-number\">15</span></code></pre>\n<h2 id=\"比较运算符和等号\"><a href=\"#比较运算符和等号\" class=\"headerlink\" title=\"比较运算符和等号\"></a>比较运算符和等号</h2>条件表达式例如 if 语句通过抽象方法<code>ToBoolean</code>强制计算它们的表达式并且总是遵守下面的规则：</li>\n</ol>\n<ul>\n<li>对象 被计算为 true</li>\n<li>Undefined 被计算为 false</li>\n<li>Null 被计算为 false</li>\n<li>布尔值 被计算为 布尔的值</li>\n<li>数字 如果是 +0、-0、或 NaN 被计算为 false, 否则为 true</li>\n<li>字符串 如果是空字符串 ‘’ 被计算为 false，否则为 true<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2></li>\n</ul>\n<ol>\n<li>给注释增加 FIXME 或 TODO 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 FIXME – need to figure this out 或者 TODO – need to implement。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Calculator</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">FIXME:</span> shouldn&#x27;t use a global here</span>\n    total = <span class=\"hljs-number\">0</span>;\n  &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Calculator</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> total should be configurable by an options param</span>\n    <span class=\"hljs-built_in\">this</span>.total = <span class=\"hljs-number\">0</span>;\n  &#125;\n&#125;</code></pre>\n<h2 id=\"空白\"><a href=\"#空白\" class=\"headerlink\" title=\"空白\"></a>空白</h2></li>\n<li>使用2个空格作为缩进。</li>\n<li>在文件末尾插入一个空行。<h2 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\"逗号\"></a>逗号</h2></li>\n<li>增加结尾的逗号: 需要。<blockquote>\n<p><code>JavaScript</code>支持这种做法,并且会自动处理结尾多余的逗号, 好处是会让git diff更干净, 新增字段更方便.<br>另外，像 babel 这样的转译器会移除结尾多余的逗号，也就是说你不必担心老旧浏览器的尾逗号问题。</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad - git diff without trailing comma</span>\n<span class=\"hljs-keyword\">const</span> hero = &#123;\n     firstName: <span class=\"hljs-string\">&#x27;Florence&#x27;</span>,\n-    lastName: <span class=\"hljs-string\">&#x27;Nightingale&#x27;</span>\n+    lastName: <span class=\"hljs-string\">&#x27;Nightingale&#x27;</span>,\n+    inventorOf: [<span class=\"hljs-string\">&#x27;coxcomb graph&#x27;</span>, <span class=\"hljs-string\">&#x27;modern nursing&#x27;</span>]\n&#125;\n\n<span class=\"hljs-comment\">// good - git diff with trailing comma</span>\n<span class=\"hljs-keyword\">const</span> hero = &#123;\n     firstName: <span class=\"hljs-string\">&#x27;Florence&#x27;</span>,\n     lastName: <span class=\"hljs-string\">&#x27;Nightingale&#x27;</span>,\n+    inventorOf: [<span class=\"hljs-string\">&#x27;coxcomb chart&#x27;</span>, <span class=\"hljs-string\">&#x27;modern nursing&#x27;</span>],\n&#125;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> hero = &#123;\n  firstName: <span class=\"hljs-string\">&#x27;Dana&#x27;</span>,\n  lastName: <span class=\"hljs-string\">&#x27;Scully&#x27;</span>\n&#125;;\n\n<span class=\"hljs-keyword\">const</span> heroes = [\n  <span class=\"hljs-string\">&#x27;Batman&#x27;</span>,\n  <span class=\"hljs-string\">&#x27;Superman&#x27;</span>\n];\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> hero = &#123;\n  firstName: <span class=\"hljs-string\">&#x27;Dana&#x27;</span>,\n  lastName: <span class=\"hljs-string\">&#x27;Scully&#x27;</span>,\n&#125;;\n\n<span class=\"hljs-keyword\">const</span> heroes = [\n  <span class=\"hljs-string\">&#x27;Batman&#x27;</span>,\n  <span class=\"hljs-string\">&#x27;Superman&#x27;</span>,\n];</code></pre>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2></li>\n<li>字符串<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">//  =&gt; this.reviewScore = 9;</span>\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> totalScore = <span class=\"hljs-built_in\">this</span>.reviewScore + <span class=\"hljs-string\">&#x27;&#x27;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> totalScore = <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-built_in\">this</span>.reviewScore);</code></pre></li>\n<li>如果因为某些原因 parseInt 成为你所做的事的瓶颈而需要使用位操作解决性能问题时，留个注释说清楚原因和你的目的。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 使用 parseInt 导致我的程序变慢，</span>\n<span class=\"hljs-comment\"> * 改成使用位操作转换数字快多了。</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">const</span> val = inputValue &gt;&gt; <span class=\"hljs-number\">0</span>;</code></pre>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2></li>\n<li>别保存<code>this</code>的引用。使用箭头函数或<code>Function#bind</code>。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-built_in\">this</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(self);\n  &#125;;\n&#125;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> that = <span class=\"hljs-built_in\">this</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(that);\n  &#125;;\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);\n  &#125;;\n&#125;</code></pre></li>\n<li>如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// file contents</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CheckBox</span> </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> CheckBox;\n\n<span class=\"hljs-comment\">// in some other file</span>\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">import</span> CheckBox <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./checkBox&#x27;</span>;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">import</span> CheckBox <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./check_box&#x27;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">import</span> CheckBox <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./CheckBox&#x27;</span>;</code></pre></li>\n<li>当你导出默认的函数时使用驼峰式命名。你的文件名必须和函数名完全保持一致。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeStyleGuide</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> makeStyleGuide;</code></pre></li>\n<li>当你导出单例、函数库、空对象时使用帕斯卡式命名。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">const</span> AirbnbStyleGuide = &#123;\n  es6: &#123;\n  &#125;\n&#125;;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> AirbnbStyleGuide;</code></pre>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2></li>\n<li>当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n$(<span class=\"hljs-built_in\">this</span>).trigger(<span class=\"hljs-string\">&#x27;listingUpdated&#x27;</span>, listing.id);\n\n...\n\n$(<span class=\"hljs-built_in\">this</span>).on(<span class=\"hljs-string\">&#x27;listingUpdated&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, listingId</span>) </span>&#123;\n  <span class=\"hljs-comment\">// do something with listingId</span>\n&#125;);\n\n<span class=\"hljs-comment\">// good</span>\n$(<span class=\"hljs-built_in\">this</span>).trigger(<span class=\"hljs-string\">&#x27;listingUpdated&#x27;</span>, &#123; <span class=\"hljs-attr\">listingId</span> : listing.id &#125;);\n\n...\n\n$(<span class=\"hljs-built_in\">this</span>).on(<span class=\"hljs-string\">&#x27;listingUpdated&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, data</span>) </span>&#123;\n  <span class=\"hljs-comment\">// do something with data.listingId</span>\n&#125;);</code></pre></li>\n</ol>\n","excerpt":"<h1 id=\"Airbnb-JavaScript-Style-Guide-阅读笔记\"><a href=\"#Airbnb-JavaScript-Style-Guide-阅读笔记\" class=\"headerlink\" title=\"Airbnb JavaScript Style Guide 阅读笔记\"></a>Airbnb JavaScript Style Guide 阅读笔记</h1><p>Airbnb的JavaScript代码风格是世界上最流行的JavaScript代码风格之一, 在阅读的时候结合我自己的使用经验记录如下重点, 日后多次阅读应该会持续更新.<br>在线阅读地址: <a href=\"https://github.com/airbnb/javascript\">https://github.com/airbnb/javascript</a><br>(中文翻译版: <a href=\"https://github.com/yuche/javascript\">https://github.com/yuche/javascript</a>)</p>","more":"<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><ol>\n<li>使用字面值创建对象<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> item = &#123;&#125;;</code></pre></li>\n<li>使用对象方法的简写<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> atom = &#123;\n  value: <span class=\"hljs-number\">1</span>,\n\n  addValue: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> atom.value + value;\n  &#125;,\n&#125;;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> atom = &#123;\n  value: <span class=\"hljs-number\">1</span>,\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">addValue</span>(<span class=\"hljs-params\">value</span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> atom.value + value;\n  &#125;,\n&#125;;</code></pre>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2></li>\n<li>使用字面值创建数组<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> items = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>();\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> items = [];</code></pre></li>\n<li>使用扩展运算符<code>...</code>复制数组<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> len = items.length;\n<span class=\"hljs-keyword\">const</span> itemsCopy = [];\n<span class=\"hljs-keyword\">let</span> i;\n\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) &#123;\n  itemsCopy[i] = items[i];\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> itemsCopy = [...items];</code></pre></li>\n<li>使用Array#from把类数组对象转为数组<pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;.foo&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> nodes = <span class=\"hljs-built_in\">Array</span>.from(foo);</code></pre>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2></li>\n<li>使用解构存取和使用多属性对象<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\">user</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> firstName = user.firstName;\n  <span class=\"hljs-keyword\">const</span> lastName = user.lastName;\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;firstName&#125;</span> <span class=\"hljs-subst\">$&#123;lastName&#125;</span>`</span>;\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> &#123; firstName, lastName &#125; = obj;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;firstName&#125;</span> <span class=\"hljs-subst\">$&#123;lastName&#125;</span>`</span>;\n&#125;\n\n<span class=\"hljs-comment\">// best</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\">&#123; firstName, lastName &#125;</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;firstName&#125;</span> <span class=\"hljs-subst\">$&#123;lastName&#125;</span>`</span>;\n&#125;</code></pre></li>\n<li>对数组使用解构赋值<pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> first = arr[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">const</span> second = arr[<span class=\"hljs-number\">1</span>];\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> [first, second] = arr;</code></pre></li>\n<li>回传对个对象时, 使用对象解构, 而不是数组解构<blockquote>\n<p>为什么？增加属性或者改变排序不会改变调用时的位置。</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processInput</span>(<span class=\"hljs-params\">input</span>) </span>&#123;\n  <span class=\"hljs-comment\">// then a miracle occurs</span>\n  <span class=\"hljs-keyword\">return</span> [left, right, top, bottom];\n&#125;\n\n<span class=\"hljs-comment\">// 调用时需要考虑回调数据的顺序。</span>\n<span class=\"hljs-keyword\">const</span> [left, __, top] = processInput(input);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processInput</span>(<span class=\"hljs-params\">input</span>) </span>&#123;\n  <span class=\"hljs-comment\">// then a miracle occurs</span>\n  <span class=\"hljs-keyword\">return</span> &#123; left, right, top, bottom &#125;;\n&#125;\n\n<span class=\"hljs-comment\">// 调用时只选择需要的数据</span>\n<span class=\"hljs-keyword\">const</span> &#123; left, right &#125; = processInput(input);</code></pre>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2></li>\n<li>程序化生成字符串时使用模板字符串代替字符串连接<blockquote>\n<p>模板字符串更简洁, 根据可读性</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">name</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;How are you, &#x27;</span> + name + <span class=\"hljs-string\">&#x27;?&#x27;</span>;\n&#125;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">name</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&#x27;How are you, &#x27;</span>, name, <span class=\"hljs-string\">&#x27;?&#x27;</span>].join();\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">name</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`How are you, <span class=\"hljs-subst\">$&#123;name&#125;</span>?`</span>;</code></pre>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2></li>\n<li>使用函数声明代替函数表达式<blockquote>\n<p>因为函数声明是可命名的, 所以他们在调用栈中更容易\b被识别.<br>此外函数声明会把整个函数提升(hoisted), 而函数表达式只会把函数的引用变量名提升. 这条规则是的箭头函数可以取代函数表达式.</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n&#125;;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n&#125;</code></pre></li>\n<li>函数表达式<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// 立即调用的函数表达式(IIFE)</span>\n(<span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;welcome!&#x27;</span>)\n&#125;)()</code></pre></li>\n<li>不要使用<code>arguments</code>。可以选择<code>rest</code>语法<code>...</code>替代<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">concatenateAll</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n  <span class=\"hljs-keyword\">return</span> args.join(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">concatenateAll</span>(<span class=\"hljs-params\">...args</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> args.join(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n&#125;</code></pre></li>\n<li>直接给函数的参数指定默认值，不要使用一个变化的函数参数。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// really bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleThings</span>(<span class=\"hljs-params\">opts</span>) </span>&#123;\n  <span class=\"hljs-comment\">// 不！我们不应该改变函数参数。</span>\n  <span class=\"hljs-comment\">// 更加糟糕: 如果参数 opts 是 false 的话，它就会被设定为一个对象。</span>\n  <span class=\"hljs-comment\">// 但这样的写法会造成一些 Bugs。</span>\n  <span class=\"hljs-comment\">//（译注：例如当 opts 被赋值为空字符串，opts 仍然会被下一行代码设定为一个空对象。）</span>\n  opts = opts || &#123;&#125;;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n\n<span class=\"hljs-comment\">// still bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleThings</span>(<span class=\"hljs-params\">opts</span>) </span>&#123;\n  <span class=\"hljs-keyword\">if</span> (opts === <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>) &#123;\n    opts = &#123;&#125;;\n  &#125;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleThings</span>(<span class=\"hljs-params\">opts = &#123;&#125;</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2></li>\n<li>总是使用<code>class</code>, 避免使用<code>prototype</code><blockquote>\n<p>因为<code>class</code>语法更易读</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Queen</span>(<span class=\"hljs-params\">contents = []</span>) </span>&#123;\n    <span class=\"hljs-built_in\">this</span>._quene = [...contents];\n&#125;\nQuene.prototype.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-built_in\">this</span>._quene[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-built_in\">this</span>._quene.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">return</span> value;\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queen</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">contents = []</span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>._quene = [...contents];\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-built_in\">this</span>._quene[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-built_in\">this</span>._quene.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">return</span> value;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"Iterators-and-Generators\"><a href=\"#Iterators-and-Generators\" class=\"headerlink\" title=\"Iterators and Generators\"></a>Iterators and Generators</h2></li>\n<li>不要使用<code>iterators</code>, 使用高阶函数如<code>map</code>或者<code>reduce</code>来代替<code>for-of</code><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> num <span class=\"hljs-keyword\">of</span> numbers) &#123;\n  sum += num;\n&#125;\n\nsum === <span class=\"hljs-number\">15</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\nnumbers.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">num</span>) =&gt;</span> sum += num);\nsum === <span class=\"hljs-number\">15</span>\n\n<span class=\"hljs-comment\">// best (use the functional force)</span>\n<span class=\"hljs-keyword\">const</span> sum = numbers.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">total, num</span>) =&gt;</span> total += num, <span class=\"hljs-number\">0</span>)\nsum === <span class=\"hljs-number\">15</span></code></pre>\n<h2 id=\"比较运算符和等号\"><a href=\"#比较运算符和等号\" class=\"headerlink\" title=\"比较运算符和等号\"></a>比较运算符和等号</h2>条件表达式例如 if 语句通过抽象方法<code>ToBoolean</code>强制计算它们的表达式并且总是遵守下面的规则：</li>\n</ol>\n<ul>\n<li>对象 被计算为 true</li>\n<li>Undefined 被计算为 false</li>\n<li>Null 被计算为 false</li>\n<li>布尔值 被计算为 布尔的值</li>\n<li>数字 如果是 +0、-0、或 NaN 被计算为 false, 否则为 true</li>\n<li>字符串 如果是空字符串 ‘’ 被计算为 false，否则为 true<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2></li>\n</ul>\n<ol>\n<li>给注释增加 FIXME 或 TODO 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 FIXME – need to figure this out 或者 TODO – need to implement。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Calculator</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">FIXME:</span> shouldn&#x27;t use a global here</span>\n    total = <span class=\"hljs-number\">0</span>;\n  &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Calculator</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> total should be configurable by an options param</span>\n    <span class=\"hljs-built_in\">this</span>.total = <span class=\"hljs-number\">0</span>;\n  &#125;\n&#125;</code></pre>\n<h2 id=\"空白\"><a href=\"#空白\" class=\"headerlink\" title=\"空白\"></a>空白</h2></li>\n<li>使用2个空格作为缩进。</li>\n<li>在文件末尾插入一个空行。<h2 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\"逗号\"></a>逗号</h2></li>\n<li>增加结尾的逗号: 需要。<blockquote>\n<p><code>JavaScript</code>支持这种做法,并且会自动处理结尾多余的逗号, 好处是会让git diff更干净, 新增字段更方便.<br>另外，像 babel 这样的转译器会移除结尾多余的逗号，也就是说你不必担心老旧浏览器的尾逗号问题。</p>\n</blockquote>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad - git diff without trailing comma</span>\n<span class=\"hljs-keyword\">const</span> hero = &#123;\n     firstName: <span class=\"hljs-string\">&#x27;Florence&#x27;</span>,\n-    lastName: <span class=\"hljs-string\">&#x27;Nightingale&#x27;</span>\n+    lastName: <span class=\"hljs-string\">&#x27;Nightingale&#x27;</span>,\n+    inventorOf: [<span class=\"hljs-string\">&#x27;coxcomb graph&#x27;</span>, <span class=\"hljs-string\">&#x27;modern nursing&#x27;</span>]\n&#125;\n\n<span class=\"hljs-comment\">// good - git diff with trailing comma</span>\n<span class=\"hljs-keyword\">const</span> hero = &#123;\n     firstName: <span class=\"hljs-string\">&#x27;Florence&#x27;</span>,\n     lastName: <span class=\"hljs-string\">&#x27;Nightingale&#x27;</span>,\n+    inventorOf: [<span class=\"hljs-string\">&#x27;coxcomb chart&#x27;</span>, <span class=\"hljs-string\">&#x27;modern nursing&#x27;</span>],\n&#125;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> hero = &#123;\n  firstName: <span class=\"hljs-string\">&#x27;Dana&#x27;</span>,\n  lastName: <span class=\"hljs-string\">&#x27;Scully&#x27;</span>\n&#125;;\n\n<span class=\"hljs-keyword\">const</span> heroes = [\n  <span class=\"hljs-string\">&#x27;Batman&#x27;</span>,\n  <span class=\"hljs-string\">&#x27;Superman&#x27;</span>\n];\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> hero = &#123;\n  firstName: <span class=\"hljs-string\">&#x27;Dana&#x27;</span>,\n  lastName: <span class=\"hljs-string\">&#x27;Scully&#x27;</span>,\n&#125;;\n\n<span class=\"hljs-keyword\">const</span> heroes = [\n  <span class=\"hljs-string\">&#x27;Batman&#x27;</span>,\n  <span class=\"hljs-string\">&#x27;Superman&#x27;</span>,\n];</code></pre>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2></li>\n<li>字符串<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">//  =&gt; this.reviewScore = 9;</span>\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">const</span> totalScore = <span class=\"hljs-built_in\">this</span>.reviewScore + <span class=\"hljs-string\">&#x27;&#x27;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">const</span> totalScore = <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-built_in\">this</span>.reviewScore);</code></pre></li>\n<li>如果因为某些原因 parseInt 成为你所做的事的瓶颈而需要使用位操作解决性能问题时，留个注释说清楚原因和你的目的。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 使用 parseInt 导致我的程序变慢，</span>\n<span class=\"hljs-comment\"> * 改成使用位操作转换数字快多了。</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">const</span> val = inputValue &gt;&gt; <span class=\"hljs-number\">0</span>;</code></pre>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2></li>\n<li>别保存<code>this</code>的引用。使用箭头函数或<code>Function#bind</code>。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-built_in\">this</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(self);\n  &#125;;\n&#125;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> that = <span class=\"hljs-built_in\">this</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(that);\n  &#125;;\n&#125;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);\n  &#125;;\n&#125;</code></pre></li>\n<li>如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// file contents</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CheckBox</span> </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> CheckBox;\n\n<span class=\"hljs-comment\">// in some other file</span>\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">import</span> CheckBox <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./checkBox&#x27;</span>;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">import</span> CheckBox <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./check_box&#x27;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">import</span> CheckBox <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./CheckBox&#x27;</span>;</code></pre></li>\n<li>当你导出默认的函数时使用驼峰式命名。你的文件名必须和函数名完全保持一致。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeStyleGuide</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> makeStyleGuide;</code></pre></li>\n<li>当你导出单例、函数库、空对象时使用帕斯卡式命名。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">const</span> AirbnbStyleGuide = &#123;\n  es6: &#123;\n  &#125;\n&#125;;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> AirbnbStyleGuide;</code></pre>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2></li>\n<li>当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。<pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">// bad</span>\n$(<span class=\"hljs-built_in\">this</span>).trigger(<span class=\"hljs-string\">&#x27;listingUpdated&#x27;</span>, listing.id);\n\n...\n\n$(<span class=\"hljs-built_in\">this</span>).on(<span class=\"hljs-string\">&#x27;listingUpdated&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, listingId</span>) </span>&#123;\n  <span class=\"hljs-comment\">// do something with listingId</span>\n&#125;);\n\n<span class=\"hljs-comment\">// good</span>\n$(<span class=\"hljs-built_in\">this</span>).trigger(<span class=\"hljs-string\">&#x27;listingUpdated&#x27;</span>, &#123; <span class=\"hljs-attr\">listingId</span> : listing.id &#125;);\n\n...\n\n$(<span class=\"hljs-built_in\">this</span>).on(<span class=\"hljs-string\">&#x27;listingUpdated&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, data</span>) </span>&#123;\n  <span class=\"hljs-comment\">// do something with data.listingId</span>\n&#125;);</code></pre></li>\n</ol>","source":"_posts/Airbnb-JavaScript-Style-Guide.md","full_source":"/Users/krics/workspace/kricsleo_site/source/_posts/Airbnb-JavaScript-Style-Guide.md","path":"Airbnb-JavaScript-Style-Guide/","permalink":"https://kricsleo.com/Airbnb-JavaScript-Style-Guide/","photos":[],"link":""}