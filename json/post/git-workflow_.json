{"title":"git-workflow","date":"2018-08-22T07:01:31.000Z","updated":"2020-11-19T04:21:11.293Z","comments":true,"layout":"post","content":"<h3 id=\"git的日常使用流程记录\"><a href=\"#git的日常使用流程记录\" class=\"headerlink\" title=\"git的日常使用流程记录\"></a>git的日常使用流程记录</h3><p>内容参考于阮一峰老师的<a href=\"https//www.ruanyifeng.com/blog/2015/08/git-use-process.html\">Git使用规范流程</a>，记录一下git的日常使用流程。</p>\n<a id=\"more\"></a>\n<p><img src=\"https//www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png\" alt=\"常用流程图\"></p>\n<h4 id=\"1-新建分支\"><a href=\"#1-新建分支\" class=\"headerlink\" title=\"1. 新建分支\"></a>1. 新建分支</h4><p>开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支</span>\n<span class=\"hljs-comment\"># 先切换到主分支，获取最新代码</span>\ngit checkout master\ngit pull\n\n<span class=\"hljs-comment\"># 然后新建分支，在这个分支上进行新功能开发</span>\ngit checkout -b myfeature</code></pre>\n<h4 id=\"2-提交分支\"><a href=\"#2-提交分支\" class=\"headerlink\" title=\"2. 提交分支\"></a>2. 提交分支</h4><p>新功能开发完成以后提交代码</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 默认保存所有改动 --all</span>\ngit add\n\n<span class=\"hljs-comment\"># 查看发生改动的地方</span>\ngit status\n\n<span class=\"hljs-comment\"># 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息</span>\ngit commit</code></pre>\n<h4 id=\"3-同步代码\"><a href=\"#3-同步代码\" class=\"headerlink\" title=\"3. 同步代码\"></a>3. 同步代码</h4><p>开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git fetch 表示取回最新代码</span>\ngit fetch origin\n\n<span class=\"hljs-comment\"># 将有更新的代码与当前分支合并</span>\n<span class=\"hljs-comment\"># 所取回的更新，在本地主机上要用&quot;远程主机名/分支名&quot;的形式读取。比如origin主机的master，就要用origin/master读取。</span>\ngit merge origin/masterdfdf</code></pre>\n<h4 id=\"4-合并多个commit\"><a href=\"#4-合并多个commit\" class=\"headerlink\" title=\"4. 合并多个commit\"></a>4. 合并多个commit</h4><p>新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文</span>\ngit rebase -i origin/master</code></pre>\n<h4 id=\"5-推送到远程仓库\"><a href=\"#5-推送到远程仓库\" class=\"headerlink\" title=\"5. 推送到远程仓库\"></a>5. 推送到远程仓库</h4><p>多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送</span>\ngit push --force master myfeature</code></pre>\n<h4 id=\"6-发出Pull-Request\"><a href=\"#6-发出Pull-Request\" class=\"headerlink\" title=\"6. 发出Pull Request\"></a>6. 发出Pull Request</h4><p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p>\n<h2 id=\"常用-git-命令\"><a href=\"#常用-git-命令\" class=\"headerlink\" title=\"常用 git 命令\"></a>常用 git 命令</h2><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 本地分支推送到远程</span>\n<span class=\"hljs-comment\"># 参数: [origin] 远程主机名, 一般为 origin</span>\n<span class=\"hljs-comment\"># [local-branch-name]: 本地创建的分支名</span>\n<span class=\"hljs-comment\"># [remote-branch-name]: 把本地分支推送到哪个远程分支(一般和本地保持一致, 如果远程分支名不存在会自动创建)</span>\ngit push [origin] [local-brand-name]:[remote-branch-name]\n\n<span class=\"hljs-comment\"># 删除本地分支</span>\n<span class=\"hljs-comment\"># 参数: -d 删除 -D 强制删除</span>\ngit branch -[d|D] [local-branch-name]\n\n<span class=\"hljs-comment\"># 删除远程分支</span>\ngit push [origin] --delete [remote-branch-name]\n</code></pre>\n\n\n<p>参考文档: https//<a href=\"http://www.ruanyifeng.com/blog/2014/06/git_remote.html\">www.ruanyifeng.com/blog/2014/06/git_remote.html</a></p>\n<p>(end)</p>\n","excerpt":"<h3 id=\"git的日常使用流程记录\"><a href=\"#git的日常使用流程记录\" class=\"headerlink\" title=\"git的日常使用流程记录\"></a>git的日常使用流程记录</h3><p>内容参考于阮一峰老师的<a href=\"https//www.ruanyifeng.com/blog/2015/08/git-use-process.html\">Git使用规范流程</a>，记录一下git的日常使用流程。</p>","more":"<p><img src=\"https//www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png\" alt=\"常用流程图\"></p>\n<h4 id=\"1-新建分支\"><a href=\"#1-新建分支\" class=\"headerlink\" title=\"1. 新建分支\"></a>1. 新建分支</h4><p>开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支</span>\n<span class=\"hljs-comment\"># 先切换到主分支，获取最新代码</span>\ngit checkout master\ngit pull\n\n<span class=\"hljs-comment\"># 然后新建分支，在这个分支上进行新功能开发</span>\ngit checkout -b myfeature</code></pre>\n<h4 id=\"2-提交分支\"><a href=\"#2-提交分支\" class=\"headerlink\" title=\"2. 提交分支\"></a>2. 提交分支</h4><p>新功能开发完成以后提交代码</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 默认保存所有改动 --all</span>\ngit add\n\n<span class=\"hljs-comment\"># 查看发生改动的地方</span>\ngit status\n\n<span class=\"hljs-comment\"># 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息</span>\ngit commit</code></pre>\n<h4 id=\"3-同步代码\"><a href=\"#3-同步代码\" class=\"headerlink\" title=\"3. 同步代码\"></a>3. 同步代码</h4><p>开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git fetch 表示取回最新代码</span>\ngit fetch origin\n\n<span class=\"hljs-comment\"># 将有更新的代码与当前分支合并</span>\n<span class=\"hljs-comment\"># 所取回的更新，在本地主机上要用&quot;远程主机名/分支名&quot;的形式读取。比如origin主机的master，就要用origin/master读取。</span>\ngit merge origin/masterdfdf</code></pre>\n<h4 id=\"4-合并多个commit\"><a href=\"#4-合并多个commit\" class=\"headerlink\" title=\"4. 合并多个commit\"></a>4. 合并多个commit</h4><p>新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文</span>\ngit rebase -i origin/master</code></pre>\n<h4 id=\"5-推送到远程仓库\"><a href=\"#5-推送到远程仓库\" class=\"headerlink\" title=\"5. 推送到远程仓库\"></a>5. 推送到远程仓库</h4><p>多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送</span>\ngit push --force master myfeature</code></pre>\n<h4 id=\"6-发出Pull-Request\"><a href=\"#6-发出Pull-Request\" class=\"headerlink\" title=\"6. 发出Pull Request\"></a>6. 发出Pull Request</h4><p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p>\n<h2 id=\"常用-git-命令\"><a href=\"#常用-git-命令\" class=\"headerlink\" title=\"常用 git 命令\"></a>常用 git 命令</h2><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 本地分支推送到远程</span>\n<span class=\"hljs-comment\"># 参数: [origin] 远程主机名, 一般为 origin</span>\n<span class=\"hljs-comment\"># [local-branch-name]: 本地创建的分支名</span>\n<span class=\"hljs-comment\"># [remote-branch-name]: 把本地分支推送到哪个远程分支(一般和本地保持一致, 如果远程分支名不存在会自动创建)</span>\ngit push [origin] [local-brand-name]:[remote-branch-name]\n\n<span class=\"hljs-comment\"># 删除本地分支</span>\n<span class=\"hljs-comment\"># 参数: -d 删除 -D 强制删除</span>\ngit branch -[d|D] [local-branch-name]\n\n<span class=\"hljs-comment\"># 删除远程分支</span>\ngit push [origin] --delete [remote-branch-name]\n</code></pre>\n\n\n<p>参考文档: https//<a href=\"http://www.ruanyifeng.com/blog/2014/06/git_remote.html\">www.ruanyifeng.com/blog/2014/06/git_remote.html</a></p>\n<p>(end)</p>","source":"_posts/git-workflow.md","full_source":"/Users/krics/workspace/kricsleo_site/source/_posts/git-workflow.md","path":"git-workflow/","permalink":"https://kricsleo.com/git-workflow/","photos":[],"link":""}