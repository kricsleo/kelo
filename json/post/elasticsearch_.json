{"title":"elasticsearch","date":"2019-05-08T02:53:26.000Z","updated":"2020-11-19T04:21:11.212Z","comments":true,"layout":"post","content":"<h1 id=\"elasticsearch\"><a href=\"#elasticsearch\" class=\"headerlink\" title=\"elasticsearch\"></a>elasticsearch</h1><p>我的博客之前的搜索都是使用的<a href=\"https://github.com/alexbruno/hexo-generator-json-content\"><code>hexo-generator-json-content</code></a>这个插件来生成的静态json文件, 在搜索的时候会去请求这个json文件, 里面是整个博客站点的文章数据, 随着博客的数量变多, 这个文件也越来越大, 导致第一次搜索的时候下载这个文件就会出现很长时间的等待, 所以也一直想要优化博客的搜索. </p>\n<p>之前做爬虫的时候使用过<a href=\"https://www.elastic.co/cn/\"><code>elasticsearch</code></a>这个全文检索库, 感觉检索非常方便和快速, 所以这次有时间了就把博客的搜索完全迁移到了es上, 另外还顺带写了一个自动同步 hexo 博客数据到 es 里面的插件<a href=\"https://www.npmjs.com/package/hexo-elasticsearch\"><code>hexo-elasticsearch</code></a></p>\n<a id=\"more\"></a>\n\n<p>我有一个阿里云的ECS服务器, 不过内存很小只有1G, 我把node端和es都使用docker的方式部署在了这个服务器上, 然后给es分配了300多M的内存, 虽然官方建议分配内存是2G, 但是我这小水管服务器实在是没那么多, 内存给的太多了服务器直接就会挂掉, 好在目前我的博客数据也没那么多, 分配的内存暂时够用. 部署过程可以看我这篇博客<a href=\"/docker/\">docker学习笔记</a>.</p>\n<h2 id=\"关于elasticsearch\"><a href=\"#关于elasticsearch\" class=\"headerlink\" title=\"关于elasticsearch\"></a>关于elasticsearch</h2><p>有部分想法借鉴了屈屈的博客<a href=\"https://imququ.com/post/elasticsearch.html\">使用 Elasticsearch 实现博客站内搜索</a></p>\n<p>elasticsearch是一个基于lucene的全文检索库, 向外提供了简洁易用的restful api, 同时在Python, java 和 js 等语言中都有对应的实现, 使用起来很方便. 我现在主要做前端开发, 所以服务端使用的是轻量的 nodejs, 然后引用的<a href=\"https://www.npmjs.com/package/elasticsearch\"><code>elasticsearch</code></a>这个npm包来实现对 es 的操作.</p>\n<p>我使用到的也只是es比较简单的一部分功能, 已经完全可以满足我博客的搜索需求.</p>\n<blockquote>\n<p>Elasticsearch 集群可以包含多个索引（Index），每个索引可以包含多个类型（Type），每个类型可以包含多个文档（Document），每个文档可以包含多个字段（Field）。以下是 MySQL 和 Elasticsearch 的术语类比图，帮助理解： </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">MySQL</th>\n<th align=\"center\">Elasticsearch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Database</td>\n<td align=\"center\">Index</td>\n</tr>\n<tr>\n<td align=\"center\">Table</td>\n<td align=\"center\">Type</td>\n</tr>\n<tr>\n<td align=\"center\">Row</td>\n<td align=\"center\">Document</td>\n</tr>\n<tr>\n<td align=\"center\">Column</td>\n<td align=\"center\">Field</td>\n</tr>\n<tr>\n<td align=\"center\">Schema</td>\n<td align=\"center\">Mapping</td>\n</tr>\n<tr>\n<td align=\"center\">Index</td>\n<td align=\"center\">Everything Indexed by default</td>\n</tr>\n<tr>\n<td align=\"center\">SQL</td>\n<td align=\"center\">Query DSL</td>\n</tr>\n<tr>\n<td align=\"center\">–<a href=\"https://imququ.com/post/elasticsearch.html\">使用 Elasticsearch 实现博客站内搜索</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</blockquote>\n<h2 id=\"相关api\"><a href=\"#相关api\" class=\"headerlink\" title=\"相关api\"></a>相关api</h2><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html\">API Reference</a><br><a href=\"https://qbox.io/blog/integrating-elasticsearch-into-node-js-application\">How to Integrate Elasticsearch into Your Node.js Application</a><br><a href=\"https://juejin.im/post/5b799dcb6fb9a019be279bd7\">Elasticsearch 6.x Mapping设置</a></p>\n<ul>\n<li><p><code>new elasticsearch.Client()</code><br>第一步是新建一个es连接</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> es = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;elasticsearch&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> es.Client(&#123;\n  <span class=\"hljs-comment\">// es 的连接地址及ip</span>\n  host: <span class=\"hljs-string\">&#x27;your_es_host:port&#x27;</span>,\n  <span class=\"hljs-comment\">// 日志, 如果配置了的话每次操作es都会在控制输出相关信息</span>\n  log: <span class=\"hljs-string\">&#x27;trace&#x27;</span>\n&#125;);</code></pre>\n</li>\n<li><p><code>client.info()</code><br>连接之后可以通过<code>info</code>api查看es的相关信息, 检查是否连接成功, 也可使用<code>client.ping()</code>来测试连接</p>\n<pre><code class=\"hljs js\">client.info(&#123;&#125;)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">info</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(info))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(error))\n\n<span class=\"hljs-comment\">// 或者使用 ping 来查看连接是否正常</span>\nclient.ping(&#123;\n  requestTimeout: <span class=\"hljs-number\">30000</span>\n&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">success</span> =&gt;</span> &#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">success</span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;es connected!&#x27;</span>);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&#x27;es connect error!&#x27;</span>);\n  &#125;\n&#125;)</code></pre>\n</li>\n<li><p><code>client.indices.create([params] [, options] [, callback])</code><br>创建索引, 存储数据之前一般都要先创建一个索引, 之后所有的数据都会存储在这个索引中</p>\n<pre><code class=\"hljs js\">client.indices.create(&#123;\n  <span class=\"hljs-comment\">// index_name 就是索引的名字</span>\n  index: <span class=\"hljs-string\">&#x27;index_name&#x27;</span>\n&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;index success&#x27;</span>, res))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;index fail&#x27;</span>, err))</code></pre>\n</li>\n<li><p><code>client.indices.putMapping([params] [, options] [, callback])</code><br>在有了索引之后, 我们可以创建一个<code>Type</code>, 然后定义<code>Type</code>里面的各自字段的结构和索引信息, 也就是创建<code>Mapping</code>, 和MySQL不同的是在M有SQL里面要先定义好表结构(scheme)然后才能往表里插入数据, 但是在es中我们可以不用先定义<code>Mapping</code>直接就插入数据, es会自动根据数据的类型建立索引, 并且数据字段也可以动态增长, 这是es非常灵活的一点, 但是我仍然先定义<code>Mapping</code>再插入数据, 主要是因为这一步可以定义好各个字段的索引规则</p>\n</li>\n</ul>\n<p>对于一个字段首先指定该字段的<code>type</code>(数据类型), 可以查看<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html\">Mapping</a>里面的可用字段类型, 比较常用的有  </p>\n<ul>\n<li><code>text</code>: text 类型数据会被分词器拆分开来检索, 例如<code>我的名字</code>会被拆分成<code>我</code>, <code>我的</code>, <code>名字</code>和<code>我的名字</code>一般用于一段文字内容的检索, 如果不需要分词可以配置<code>index</code>项为<code>false</code>, 但是如果不需要分词的话就推荐使用<code>keyword</code>类型, <code>keyword</code>类型默认就是不进行分词的</li>\n<li><code>keyword</code>: keyword 类型数据不会被拆分, 只能作为整体进行匹配, 例如<code>我的名字</code>就只能搜索<code>我的名字</code>才能搜索到, 一般用于关键词之类的检索</li>\n<li><code>date</code>: 日期类型</li>\n<li><code>long</code>: 长整型数据</li>\n<li><code>double</code>: 浮点数数据</li>\n<li><code>boolean</code>: 布尔值</li>\n<li><code>ip</code>: ip地址</li>\n</ul>\n<p>然后是<code>term_vector</code>(词条向量), 这个配置项代表对该字段的各个term的统计信息, 如果某个词出现的位置和频率等, 具体可以查看这里<a href=\"https://blog.csdn.net/wangmaohong0717/article/details/80712978\">ElasticSearch之termvector介绍</a></p>\n<p><code>analyzer</code>配置指定该字段使用的分词器, 如果不指定, 那么使用的就是默认分词器(standard analyzer), 我这里安装了对中文分词友好<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\"><code>elasticsearch-analysis-ik</code></a>插件, 使用的是该插件提供的分词器, ik 提供了<code>ik_max_word</code>和<code>ik_smart</code>两个分词器, 前者会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query; 后者会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询.</p>\n<p><code>search_analyzer</code>配置搜索时使用的分词器, 默认和<code>analyzer</code>保持一致</p>\n<p>我的博客的<code>Mapping</code>如下</p>\n<pre><code class=\"hljs js\">client.indices.putMapping(&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  body: &#123;\n    properties: &#123;\n      title: &#123;\n        type: <span class=\"hljs-string\">&#x27;text&#x27;</span>,\n        term_vector: <span class=\"hljs-string\">&#x27;with_positions_offsets&#x27;</span>,\n        analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>,\n        search_analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>\n      &#125;,\n      subtitle: &#123;\n        type: <span class=\"hljs-string\">&#x27;text&#x27;</span>,\n        term_vector: <span class=\"hljs-string\">&#x27;with_positions_offsets&#x27;</span>,\n        analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>,\n        search_analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>\n      &#125;,\n      content: &#123;\n        type: <span class=\"hljs-string\">&#x27;text&#x27;</span>,\n        term_vector: <span class=\"hljs-string\">&#x27;with_positions_offsets&#x27;</span>,\n        analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>,\n        search_analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>\n      &#125;,\n      link: &#123;\n        type: <span class=\"hljs-string\">&#x27;keyword&#x27;</span>\n      &#125;,\n      author: &#123;\n        type: <span class=\"hljs-string\">&#x27;keyword&#x27;</span>,\n      &#125;,\n      categories: &#123;\n        type: <span class=\"hljs-string\">&#x27;keyword&#x27;</span>,\n      &#125;,\n      tags: &#123;\n        type: <span class=\"hljs-string\">&#x27;keyword&#x27;</span>,\n      &#125;,\n      create_date: &#123;\n        type: <span class=\"hljs-string\">&#x27;date&#x27;</span>,\n      &#125;,\n      update_date: &#123;\n        type: <span class=\"hljs-string\">&#x27;date&#x27;</span>,\n      &#125;\n    &#125;\n  &#125;\n&#125;);</code></pre>\n\n<ul>\n<li><p><code>client.index([params] [, options] [, callback])</code><br>像某个<code>Type</code>中插入数据, 这个接口只能一次插入一条数据</p>\n<pre><code class=\"hljs js\">client.index(&#123;\n  <span class=\"hljs-comment\">// 要插入到哪个 index 中</span>\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  <span class=\"hljs-comment\">// 要插入到哪个 Type 中</span>\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  <span class=\"hljs-comment\">// 本次插入的数据的id, 可以不配置, 默认也会生成一个id</span>\n  id: <span class=\"hljs-string\">&#x27;input-event/&#x27;</span>,\n  <span class=\"hljs-comment\">// body 内容就是本次插入的数据的各自字段内容</span>\n  body: &#123;\n    title: <span class=\"hljs-string\">&#x27;input event&#x27;</span>,\n    subtitle: <span class=\"hljs-string\">&#x27;input 元素的事件顺序&#x27;</span>,\n    author: <span class=\"hljs-string\">&#x27;kricsleo&#x27;</span>,\n    tags: [<span class=\"hljs-string\">&#x27;js&#x27;</span>, <span class=\"hljs-string\">&#x27;h5&#x27;</span>],\n    categories: [<span class=\"hljs-string\">&#x27;front-end&#x27;</span>],\n    content: <span class=\"hljs-string\">&#x27;如果是组合输入(比如中文日文等)输入的话就会出现括号中组合输入事件, 详细来说是当开始输入中文的时候就会触发`compositionstart`事件, 此时`input`事件和`keyup`事件拿到的输入框的值是不完整的(一般包含你输入的拼音和拼音之间的分号), 当中文输入结束的时候会触发`compositionend`事件, 此时可以取到该输入框的完整的输入中文后的值(一般而言这个值是我们所需要的)&#x27;</span>,\n    create_date: <span class=\"hljs-string\">&#x27;2015-12-15T13:05:55Z&#x27;</span>,\n    update_date: <span class=\"hljs-string\">&#x27;2015-12-15T13:05:55Z&#x27;</span>,\n  &#125;\n&#125;)</code></pre>\n</li>\n<li><p><code>client.bulk([params] [, options] [, callback])</code><br>如果需要批量操作的话就需要使用<code>bulk</code>接口, 给<code>bulk</code>可以一次传入多种多样的操作, 比如<code>index</code>(新增), <code>update</code>(更新)和<code>delete</code>删除等等</p>\n</li>\n</ul>\n<p>比如我博客生成的json数据里面的一个数组, 每一项都是一篇文章数据, 我需要一次性插入所有文章到es中. 我的做法是每次插入前先清除之前的文章数据, 因为文章里面的内容可能会被更新, 但是博客和es本身是相互独立的, 博客里面是没有记录该文章数据在es中的对应的数据id的, 所以没法去更新es里面的文章数据, 只能先全部清除, 然后再将最新的文章数据全部写入</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> es = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;elasticsearch&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> es.Client(&#123;\n  host: <span class=\"hljs-string\">&#x27;your_es_host:port&#x27;</span>,\n  <span class=\"hljs-comment\">// log: &#x27;trace&#x27;</span>\n&#125;);\n\n<span class=\"hljs-comment\">// json file path</span>\n<span class=\"hljs-keyword\">const</span> JSON_PATH = <span class=\"hljs-string\">&#x27;../../public/content.json&#x27;</span>;\n\n<span class=\"hljs-comment\">// generate docs by post data</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convertPosts2Docs</span>(<span class=\"hljs-params\">posts</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> posts.map(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> (&#123;\n    index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n    type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n    id: post.title,\n    body: &#123;\n      title: post.title,\n      subtitle: post.subtitle || post.title,\n      link: <span class=\"hljs-string\">`/<span class=\"hljs-subst\">$&#123;post.path&#125;</span>`</span>,\n      content: post.text,\n      create_date: post.date,\n      update_date: post.updated\n    &#125;\n  &#125;));\n&#125;\n\n<span class=\"hljs-comment\">// generate bulk body by post</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildBody</span>(<span class=\"hljs-params\">post</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> &#123;\n    body: &#123;\n      title: post.title,\n      subtitle: post.subtitle || post.title,\n      link: <span class=\"hljs-string\">`/<span class=\"hljs-subst\">$&#123;post.path&#125;</span>`</span>,\n      content: post.text,\n      create_date: post.date,\n      update_date: post.updated\n    &#125;\n  &#125;\n&#125;\n\n<span class=\"hljs-comment\">// generate bulk by index, type, posts</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildBulk</span>(<span class=\"hljs-params\">index, type, posts</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> bulk = [];\n  posts.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> &#123;\n    bulk.push(&#123;\n      index: &#123;\n        _index: index,\n        _type: type,\n        _id: post.title,\n      &#125;\n    &#125;);\n    bulk.push(buildBody(post));\n  &#125;);\n  <span class=\"hljs-keyword\">return</span> bulk;\n&#125;\n\n<span class=\"hljs-comment\">// write json into es</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">writeJson</span>(<span class=\"hljs-params\">jsonPath</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> filePath = path.resolve(__dirname, jsonPath);\n  fs.readFile(filePath, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">if</span> (err) &#123;\n      <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">`read file: <span class=\"hljs-subst\">$&#123;filePath&#125;</span> failed!`</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    &#125;\n    <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-built_in\">JSON</span>.parse(data);\n    <span class=\"hljs-keyword\">const</span> bulk = buildBulk(<span class=\"hljs-string\">&#x27;blog&#x27;</span>, <span class=\"hljs-string\">&#x27;article&#x27;</span>, posts);\n    client.bulk(&#123;\n      body: bulk\n    &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;\n      <span class=\"hljs-keyword\">let</span> errorCount = <span class=\"hljs-number\">0</span>;\n      res.items.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (item.index &amp;&amp; item.index.error) &#123;\n          <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;errorCount++&#125;</span> write failed: `</span>, item.index.error);\n        &#125;\n      &#125;);\n\n      <span class=\"hljs-keyword\">const</span> total = res.items.length;\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`write done: <span class=\"hljs-subst\">$&#123;total - errorCount&#125;</span>/<span class=\"hljs-subst\">$&#123;total&#125;</span> write successfully!`</span>);\n    &#125;)\n\n  &#125;);\n&#125;\n\n<span class=\"hljs-comment\">// clear all previous docs</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clearDocs</span>(<span class=\"hljs-params\">index, type</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> client.deleteByQuery(&#123;\n    index,\n    type,\n    body: &#123;\n      query: &#123;\n        match_all: &#123;&#125;\n      &#125;\n    &#125;\n  &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`delete done: <span class=\"hljs-subst\">$&#123;res.deleted&#125;</span>/<span class=\"hljs-subst\">$&#123;res.total&#125;</span> delete successfully!`</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(res);\n  &#125;)\n&#125;\n\nclearDocs(<span class=\"hljs-string\">&#x27;blog&#x27;</span>, <span class=\"hljs-string\">&#x27;article&#x27;</span>)\n  .then(<span class=\"hljs-function\">() =&gt;</span> writeJson(JSON_PATH))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(error))</code></pre>\n\n<ul>\n<li><code>client.search([params] [, options] [, callback])</code><br>根据 Query DSL 语句查询符合条件的数据</li>\n</ul>\n<p>一个最简单的搜索, 搜索后匹配的数据返回在<code>hits</code>字段中</p>\n<pre><code class=\"hljs js\">client.search(&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  q: <span class=\"hljs-string\">&#x27;中文&#x27;</span>\n&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(res))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(err))</code></pre>\n\n<p>目前我的博客使用的搜索语句参考了屈屈的博客里面的搜索语句</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> generateDSL = <span class=\"hljs-function\">(<span class=\"hljs-params\">q = <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-keyword\">from</span> = <span class=\"hljs-number\">0</span>, to = <span class=\"hljs-number\">10</span></span>) =&gt;</span> (&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  <span class=\"hljs-comment\">// 搜索关键词</span>\n  q,\n  <span class=\"hljs-comment\">// 搜索条目起始位置</span>\n  <span class=\"hljs-keyword\">from</span>,\n  <span class=\"hljs-comment\">// 搜索条目终止位置</span>\n  to,\n  body: &#123;\n    query: &#123;\n      <span class=\"hljs-comment\">// 使用 dis_max 会在最后计算文档的相关性算分的时候, 只会取queries中的相关性的最大值</span>\n      <span class=\"hljs-comment\">// 关于 dis_max 可以查看这里 [Elasticsearch的入门使用](https://juejin.im/post/5b9dbe645188255c865e0d0e#heading-84)</span>\n      dis_max: &#123;\n        queries: [\n          &#123;\n            match: &#123;\n              <span class=\"hljs-comment\">// 在哪个字段中进行搜索, 这里是 title 字段</span>\n              title: &#123;\n                <span class=\"hljs-comment\">// 要搜索的关键词</span>\n                query: q,\n                <span class=\"hljs-comment\">// 最小匹配数</span>\n                minimum_should_match: <span class=\"hljs-string\">&#x27;50%&#x27;</span>,\n                <span class=\"hljs-comment\">// 设置查询语句的权重, 大于1权重增大, 0到1之间权重逐渐降低。匹配到权重越高的查询语句, 相关性算分越高</span>\n                boost: <span class=\"hljs-number\">4</span>,\n              &#125;\n            &#125;\n          &#125;,\n          &#123;\n            match: &#123;\n              subtitle: &#123;\n                query: q,\n                minimum_should_match: <span class=\"hljs-string\">&#x27;50%&#x27;</span>,\n                boost: <span class=\"hljs-number\">4</span>,\n              &#125;\n            &#125;\n          &#125;, &#123;\n            match: &#123;\n              content: &#123;\n                query: q,\n                minimum_should_match: <span class=\"hljs-string\">&#x27;75%&#x27;</span>,\n                boost: <span class=\"hljs-number\">4</span>,\n              &#125;\n            &#125;\n          &#125;, &#123;\n            match: &#123;\n              tags: &#123;\n                query: q,\n                minimum_should_match: <span class=\"hljs-string\">&#x27;100%&#x27;</span>,\n                boost: <span class=\"hljs-number\">2</span>,\n              &#125;\n            &#125;\n          &#125;, &#123;\n            match: &#123;\n              categories: &#123;\n                query: q,\n                minimum_should_match: <span class=\"hljs-string\">&#x27;100%&#x27;</span>,\n                boost: <span class=\"hljs-number\">2</span>,\n              &#125;\n            &#125;\n          &#125;\n        ],\n        <span class=\"hljs-comment\">// 将其他匹配语句的评分也计算在内。将其他匹配语句的评分结果与tie_breaker相乘, 最后与最佳字段的评分求和得出文档的算分。</span>\n        tie_breaker: <span class=\"hljs-number\">0.3</span>\n      &#125;\n    &#125;,\n    <span class=\"hljs-comment\">// 会对检索的匹配的结果中，匹配的部分做出高亮的展示, 默认使用标签em包裹</span>\n    highlight: &#123;\n      <span class=\"hljs-comment\">// 指定高亮标签前标签</span>\n      pre_tags: [<span class=\"hljs-string\">&#x27;&lt;b&gt;&#x27;</span>],\n      <span class=\"hljs-comment\">// 指定高亮标签后标签</span>\n      post_tags: [<span class=\"hljs-string\">&#x27;&lt;/b&gt;&#x27;</span>],\n      fields: &#123;\n        <span class=\"hljs-comment\">// 返回的匹配结果中会列出title字段(数组)</span>\n        title: &#123;&#125;,\n        <span class=\"hljs-comment\">// 返回的匹配结果中会列出content字段(数组)</span>\n        content: &#123;&#125;,\n      &#125;\n    &#125;\n  &#125;\n&#125;);</code></pre>\n\n<ul>\n<li><code>client.delete([params] [, options] [, callback])</code><br>删除指定的某条数据, 使用此api删除时必须至少指定<code>index</code>, <code>type</code>和<code>id</code>三个参数, 否则就会删除失败, 也就是说此api只能删除单条数据</li>\n</ul>\n<pre><code class=\"hljs js\">client.delete(&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  id: <span class=\"hljs-string\">&#x27;data_id&#x27;</span>\n&#125;)</code></pre>\n\n<ul>\n<li><code>client.deleteByQuery([params] [, options] [, callback])</code><br>删除符合条件的数据, 使用此api可以删除多条数据, 只要数据符合 query 的条件即可</li>\n</ul>\n<p>比如我每次同步博客数据的时候都会先删除之前的所有历史博客数据使用的就是这个api</p>\n<pre><code class=\"hljs js\">client.deleteByQuery(&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  body: &#123;\n    query: &#123;\n      <span class=\"hljs-comment\">// 匹配所有文档</span>\n      match_all: &#123;&#125;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"elaticsearch与hexo配合\"><a href=\"#elaticsearch与hexo配合\" class=\"headerlink\" title=\"elaticsearch与hexo配合\"></a><code>elaticsearch</code>与<code>hexo</code>配合</h2><p>折腾着写了个hexo的插件<a href=\"https://www.npmjs.com/package/hexo-elasticsearch\"><code>hexo-elasticsearch</code></a>, 在每次重新生成文章的时候都会自动把文章信息同步到自己的es库中, 不过如果真的要做到博客中使用es来进行搜索, 那么你还要做部署es和部署nodejs后端提供查询服务两个部分, 目前来说我就是这样实现的, 关于 es 的部署你可以查看我这篇博客: <a href=\"/docker\">docker学习笔记</a></p>\n","excerpt":"<h1 id=\"elasticsearch\"><a href=\"#elasticsearch\" class=\"headerlink\" title=\"elasticsearch\"></a>elasticsearch</h1><p>我的博客之前的搜索都是使用的<a href=\"https://github.com/alexbruno/hexo-generator-json-content\"><code>hexo-generator-json-content</code></a>这个插件来生成的静态json文件, 在搜索的时候会去请求这个json文件, 里面是整个博客站点的文章数据, 随着博客的数量变多, 这个文件也越来越大, 导致第一次搜索的时候下载这个文件就会出现很长时间的等待, 所以也一直想要优化博客的搜索. </p>\n<p>之前做爬虫的时候使用过<a href=\"https://www.elastic.co/cn/\"><code>elasticsearch</code></a>这个全文检索库, 感觉检索非常方便和快速, 所以这次有时间了就把博客的搜索完全迁移到了es上, 另外还顺带写了一个自动同步 hexo 博客数据到 es 里面的插件<a href=\"https://www.npmjs.com/package/hexo-elasticsearch\"><code>hexo-elasticsearch</code></a></p>","more":"<p>我有一个阿里云的ECS服务器, 不过内存很小只有1G, 我把node端和es都使用docker的方式部署在了这个服务器上, 然后给es分配了300多M的内存, 虽然官方建议分配内存是2G, 但是我这小水管服务器实在是没那么多, 内存给的太多了服务器直接就会挂掉, 好在目前我的博客数据也没那么多, 分配的内存暂时够用. 部署过程可以看我这篇博客<a href=\"/docker/\">docker学习笔记</a>.</p>\n<h2 id=\"关于elasticsearch\"><a href=\"#关于elasticsearch\" class=\"headerlink\" title=\"关于elasticsearch\"></a>关于elasticsearch</h2><p>有部分想法借鉴了屈屈的博客<a href=\"https://imququ.com/post/elasticsearch.html\">使用 Elasticsearch 实现博客站内搜索</a></p>\n<p>elasticsearch是一个基于lucene的全文检索库, 向外提供了简洁易用的restful api, 同时在Python, java 和 js 等语言中都有对应的实现, 使用起来很方便. 我现在主要做前端开发, 所以服务端使用的是轻量的 nodejs, 然后引用的<a href=\"https://www.npmjs.com/package/elasticsearch\"><code>elasticsearch</code></a>这个npm包来实现对 es 的操作.</p>\n<p>我使用到的也只是es比较简单的一部分功能, 已经完全可以满足我博客的搜索需求.</p>\n<blockquote>\n<p>Elasticsearch 集群可以包含多个索引（Index），每个索引可以包含多个类型（Type），每个类型可以包含多个文档（Document），每个文档可以包含多个字段（Field）。以下是 MySQL 和 Elasticsearch 的术语类比图，帮助理解： </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">MySQL</th>\n<th align=\"center\">Elasticsearch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Database</td>\n<td align=\"center\">Index</td>\n</tr>\n<tr>\n<td align=\"center\">Table</td>\n<td align=\"center\">Type</td>\n</tr>\n<tr>\n<td align=\"center\">Row</td>\n<td align=\"center\">Document</td>\n</tr>\n<tr>\n<td align=\"center\">Column</td>\n<td align=\"center\">Field</td>\n</tr>\n<tr>\n<td align=\"center\">Schema</td>\n<td align=\"center\">Mapping</td>\n</tr>\n<tr>\n<td align=\"center\">Index</td>\n<td align=\"center\">Everything Indexed by default</td>\n</tr>\n<tr>\n<td align=\"center\">SQL</td>\n<td align=\"center\">Query DSL</td>\n</tr>\n<tr>\n<td align=\"center\">–<a href=\"https://imququ.com/post/elasticsearch.html\">使用 Elasticsearch 实现博客站内搜索</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</blockquote>\n<h2 id=\"相关api\"><a href=\"#相关api\" class=\"headerlink\" title=\"相关api\"></a>相关api</h2><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html\">API Reference</a><br><a href=\"https://qbox.io/blog/integrating-elasticsearch-into-node-js-application\">How to Integrate Elasticsearch into Your Node.js Application</a><br><a href=\"https://juejin.im/post/5b799dcb6fb9a019be279bd7\">Elasticsearch 6.x Mapping设置</a></p>\n<ul>\n<li><p><code>new elasticsearch.Client()</code><br>第一步是新建一个es连接</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> es = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;elasticsearch&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> es.Client(&#123;\n  <span class=\"hljs-comment\">// es 的连接地址及ip</span>\n  host: <span class=\"hljs-string\">&#x27;your_es_host:port&#x27;</span>,\n  <span class=\"hljs-comment\">// 日志, 如果配置了的话每次操作es都会在控制输出相关信息</span>\n  log: <span class=\"hljs-string\">&#x27;trace&#x27;</span>\n&#125;);</code></pre>\n</li>\n<li><p><code>client.info()</code><br>连接之后可以通过<code>info</code>api查看es的相关信息, 检查是否连接成功, 也可使用<code>client.ping()</code>来测试连接</p>\n<pre><code class=\"hljs js\">client.info(&#123;&#125;)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">info</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(info))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(error))\n\n<span class=\"hljs-comment\">// 或者使用 ping 来查看连接是否正常</span>\nclient.ping(&#123;\n  requestTimeout: <span class=\"hljs-number\">30000</span>\n&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">success</span> =&gt;</span> &#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">success</span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;es connected!&#x27;</span>);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&#x27;es connect error!&#x27;</span>);\n  &#125;\n&#125;)</code></pre>\n</li>\n<li><p><code>client.indices.create([params] [, options] [, callback])</code><br>创建索引, 存储数据之前一般都要先创建一个索引, 之后所有的数据都会存储在这个索引中</p>\n<pre><code class=\"hljs js\">client.indices.create(&#123;\n  <span class=\"hljs-comment\">// index_name 就是索引的名字</span>\n  index: <span class=\"hljs-string\">&#x27;index_name&#x27;</span>\n&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;index success&#x27;</span>, res))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;index fail&#x27;</span>, err))</code></pre>\n</li>\n<li><p><code>client.indices.putMapping([params] [, options] [, callback])</code><br>在有了索引之后, 我们可以创建一个<code>Type</code>, 然后定义<code>Type</code>里面的各自字段的结构和索引信息, 也就是创建<code>Mapping</code>, 和MySQL不同的是在M有SQL里面要先定义好表结构(scheme)然后才能往表里插入数据, 但是在es中我们可以不用先定义<code>Mapping</code>直接就插入数据, es会自动根据数据的类型建立索引, 并且数据字段也可以动态增长, 这是es非常灵活的一点, 但是我仍然先定义<code>Mapping</code>再插入数据, 主要是因为这一步可以定义好各个字段的索引规则</p>\n</li>\n</ul>\n<p>对于一个字段首先指定该字段的<code>type</code>(数据类型), 可以查看<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html\">Mapping</a>里面的可用字段类型, 比较常用的有  </p>\n<ul>\n<li><code>text</code>: text 类型数据会被分词器拆分开来检索, 例如<code>我的名字</code>会被拆分成<code>我</code>, <code>我的</code>, <code>名字</code>和<code>我的名字</code>一般用于一段文字内容的检索, 如果不需要分词可以配置<code>index</code>项为<code>false</code>, 但是如果不需要分词的话就推荐使用<code>keyword</code>类型, <code>keyword</code>类型默认就是不进行分词的</li>\n<li><code>keyword</code>: keyword 类型数据不会被拆分, 只能作为整体进行匹配, 例如<code>我的名字</code>就只能搜索<code>我的名字</code>才能搜索到, 一般用于关键词之类的检索</li>\n<li><code>date</code>: 日期类型</li>\n<li><code>long</code>: 长整型数据</li>\n<li><code>double</code>: 浮点数数据</li>\n<li><code>boolean</code>: 布尔值</li>\n<li><code>ip</code>: ip地址</li>\n</ul>\n<p>然后是<code>term_vector</code>(词条向量), 这个配置项代表对该字段的各个term的统计信息, 如果某个词出现的位置和频率等, 具体可以查看这里<a href=\"https://blog.csdn.net/wangmaohong0717/article/details/80712978\">ElasticSearch之termvector介绍</a></p>\n<p><code>analyzer</code>配置指定该字段使用的分词器, 如果不指定, 那么使用的就是默认分词器(standard analyzer), 我这里安装了对中文分词友好<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\"><code>elasticsearch-analysis-ik</code></a>插件, 使用的是该插件提供的分词器, ik 提供了<code>ik_max_word</code>和<code>ik_smart</code>两个分词器, 前者会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query; 后者会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询.</p>\n<p><code>search_analyzer</code>配置搜索时使用的分词器, 默认和<code>analyzer</code>保持一致</p>\n<p>我的博客的<code>Mapping</code>如下</p>\n<pre><code class=\"hljs js\">client.indices.putMapping(&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  body: &#123;\n    properties: &#123;\n      title: &#123;\n        type: <span class=\"hljs-string\">&#x27;text&#x27;</span>,\n        term_vector: <span class=\"hljs-string\">&#x27;with_positions_offsets&#x27;</span>,\n        analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>,\n        search_analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>\n      &#125;,\n      subtitle: &#123;\n        type: <span class=\"hljs-string\">&#x27;text&#x27;</span>,\n        term_vector: <span class=\"hljs-string\">&#x27;with_positions_offsets&#x27;</span>,\n        analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>,\n        search_analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>\n      &#125;,\n      content: &#123;\n        type: <span class=\"hljs-string\">&#x27;text&#x27;</span>,\n        term_vector: <span class=\"hljs-string\">&#x27;with_positions_offsets&#x27;</span>,\n        analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>,\n        search_analyzer: <span class=\"hljs-string\">&#x27;ik_max_word&#x27;</span>\n      &#125;,\n      link: &#123;\n        type: <span class=\"hljs-string\">&#x27;keyword&#x27;</span>\n      &#125;,\n      author: &#123;\n        type: <span class=\"hljs-string\">&#x27;keyword&#x27;</span>,\n      &#125;,\n      categories: &#123;\n        type: <span class=\"hljs-string\">&#x27;keyword&#x27;</span>,\n      &#125;,\n      tags: &#123;\n        type: <span class=\"hljs-string\">&#x27;keyword&#x27;</span>,\n      &#125;,\n      create_date: &#123;\n        type: <span class=\"hljs-string\">&#x27;date&#x27;</span>,\n      &#125;,\n      update_date: &#123;\n        type: <span class=\"hljs-string\">&#x27;date&#x27;</span>,\n      &#125;\n    &#125;\n  &#125;\n&#125;);</code></pre>\n\n<ul>\n<li><p><code>client.index([params] [, options] [, callback])</code><br>像某个<code>Type</code>中插入数据, 这个接口只能一次插入一条数据</p>\n<pre><code class=\"hljs js\">client.index(&#123;\n  <span class=\"hljs-comment\">// 要插入到哪个 index 中</span>\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  <span class=\"hljs-comment\">// 要插入到哪个 Type 中</span>\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  <span class=\"hljs-comment\">// 本次插入的数据的id, 可以不配置, 默认也会生成一个id</span>\n  id: <span class=\"hljs-string\">&#x27;input-event/&#x27;</span>,\n  <span class=\"hljs-comment\">// body 内容就是本次插入的数据的各自字段内容</span>\n  body: &#123;\n    title: <span class=\"hljs-string\">&#x27;input event&#x27;</span>,\n    subtitle: <span class=\"hljs-string\">&#x27;input 元素的事件顺序&#x27;</span>,\n    author: <span class=\"hljs-string\">&#x27;kricsleo&#x27;</span>,\n    tags: [<span class=\"hljs-string\">&#x27;js&#x27;</span>, <span class=\"hljs-string\">&#x27;h5&#x27;</span>],\n    categories: [<span class=\"hljs-string\">&#x27;front-end&#x27;</span>],\n    content: <span class=\"hljs-string\">&#x27;如果是组合输入(比如中文日文等)输入的话就会出现括号中组合输入事件, 详细来说是当开始输入中文的时候就会触发`compositionstart`事件, 此时`input`事件和`keyup`事件拿到的输入框的值是不完整的(一般包含你输入的拼音和拼音之间的分号), 当中文输入结束的时候会触发`compositionend`事件, 此时可以取到该输入框的完整的输入中文后的值(一般而言这个值是我们所需要的)&#x27;</span>,\n    create_date: <span class=\"hljs-string\">&#x27;2015-12-15T13:05:55Z&#x27;</span>,\n    update_date: <span class=\"hljs-string\">&#x27;2015-12-15T13:05:55Z&#x27;</span>,\n  &#125;\n&#125;)</code></pre>\n</li>\n<li><p><code>client.bulk([params] [, options] [, callback])</code><br>如果需要批量操作的话就需要使用<code>bulk</code>接口, 给<code>bulk</code>可以一次传入多种多样的操作, 比如<code>index</code>(新增), <code>update</code>(更新)和<code>delete</code>删除等等</p>\n</li>\n</ul>\n<p>比如我博客生成的json数据里面的一个数组, 每一项都是一篇文章数据, 我需要一次性插入所有文章到es中. 我的做法是每次插入前先清除之前的文章数据, 因为文章里面的内容可能会被更新, 但是博客和es本身是相互独立的, 博客里面是没有记录该文章数据在es中的对应的数据id的, 所以没法去更新es里面的文章数据, 只能先全部清除, 然后再将最新的文章数据全部写入</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> es = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;elasticsearch&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> es.Client(&#123;\n  host: <span class=\"hljs-string\">&#x27;your_es_host:port&#x27;</span>,\n  <span class=\"hljs-comment\">// log: &#x27;trace&#x27;</span>\n&#125;);\n\n<span class=\"hljs-comment\">// json file path</span>\n<span class=\"hljs-keyword\">const</span> JSON_PATH = <span class=\"hljs-string\">&#x27;../../public/content.json&#x27;</span>;\n\n<span class=\"hljs-comment\">// generate docs by post data</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convertPosts2Docs</span>(<span class=\"hljs-params\">posts</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> posts.map(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> (&#123;\n    index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n    type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n    id: post.title,\n    body: &#123;\n      title: post.title,\n      subtitle: post.subtitle || post.title,\n      link: <span class=\"hljs-string\">`/<span class=\"hljs-subst\">$&#123;post.path&#125;</span>`</span>,\n      content: post.text,\n      create_date: post.date,\n      update_date: post.updated\n    &#125;\n  &#125;));\n&#125;\n\n<span class=\"hljs-comment\">// generate bulk body by post</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildBody</span>(<span class=\"hljs-params\">post</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> &#123;\n    body: &#123;\n      title: post.title,\n      subtitle: post.subtitle || post.title,\n      link: <span class=\"hljs-string\">`/<span class=\"hljs-subst\">$&#123;post.path&#125;</span>`</span>,\n      content: post.text,\n      create_date: post.date,\n      update_date: post.updated\n    &#125;\n  &#125;\n&#125;\n\n<span class=\"hljs-comment\">// generate bulk by index, type, posts</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildBulk</span>(<span class=\"hljs-params\">index, type, posts</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> bulk = [];\n  posts.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> &#123;\n    bulk.push(&#123;\n      index: &#123;\n        _index: index,\n        _type: type,\n        _id: post.title,\n      &#125;\n    &#125;);\n    bulk.push(buildBody(post));\n  &#125;);\n  <span class=\"hljs-keyword\">return</span> bulk;\n&#125;\n\n<span class=\"hljs-comment\">// write json into es</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">writeJson</span>(<span class=\"hljs-params\">jsonPath</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> filePath = path.resolve(__dirname, jsonPath);\n  fs.readFile(filePath, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">if</span> (err) &#123;\n      <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">`read file: <span class=\"hljs-subst\">$&#123;filePath&#125;</span> failed!`</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    &#125;\n    <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-built_in\">JSON</span>.parse(data);\n    <span class=\"hljs-keyword\">const</span> bulk = buildBulk(<span class=\"hljs-string\">&#x27;blog&#x27;</span>, <span class=\"hljs-string\">&#x27;article&#x27;</span>, posts);\n    client.bulk(&#123;\n      body: bulk\n    &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;\n      <span class=\"hljs-keyword\">let</span> errorCount = <span class=\"hljs-number\">0</span>;\n      res.items.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (item.index &amp;&amp; item.index.error) &#123;\n          <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;errorCount++&#125;</span> write failed: `</span>, item.index.error);\n        &#125;\n      &#125;);\n\n      <span class=\"hljs-keyword\">const</span> total = res.items.length;\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`write done: <span class=\"hljs-subst\">$&#123;total - errorCount&#125;</span>/<span class=\"hljs-subst\">$&#123;total&#125;</span> write successfully!`</span>);\n    &#125;)\n\n  &#125;);\n&#125;\n\n<span class=\"hljs-comment\">// clear all previous docs</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clearDocs</span>(<span class=\"hljs-params\">index, type</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> client.deleteByQuery(&#123;\n    index,\n    type,\n    body: &#123;\n      query: &#123;\n        match_all: &#123;&#125;\n      &#125;\n    &#125;\n  &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`delete done: <span class=\"hljs-subst\">$&#123;res.deleted&#125;</span>/<span class=\"hljs-subst\">$&#123;res.total&#125;</span> delete successfully!`</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(res);\n  &#125;)\n&#125;\n\nclearDocs(<span class=\"hljs-string\">&#x27;blog&#x27;</span>, <span class=\"hljs-string\">&#x27;article&#x27;</span>)\n  .then(<span class=\"hljs-function\">() =&gt;</span> writeJson(JSON_PATH))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(error))</code></pre>\n\n<ul>\n<li><code>client.search([params] [, options] [, callback])</code><br>根据 Query DSL 语句查询符合条件的数据</li>\n</ul>\n<p>一个最简单的搜索, 搜索后匹配的数据返回在<code>hits</code>字段中</p>\n<pre><code class=\"hljs js\">client.search(&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  q: <span class=\"hljs-string\">&#x27;中文&#x27;</span>\n&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(res))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(err))</code></pre>\n\n<p>目前我的博客使用的搜索语句参考了屈屈的博客里面的搜索语句</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> generateDSL = <span class=\"hljs-function\">(<span class=\"hljs-params\">q = <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-keyword\">from</span> = <span class=\"hljs-number\">0</span>, to = <span class=\"hljs-number\">10</span></span>) =&gt;</span> (&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  <span class=\"hljs-comment\">// 搜索关键词</span>\n  q,\n  <span class=\"hljs-comment\">// 搜索条目起始位置</span>\n  <span class=\"hljs-keyword\">from</span>,\n  <span class=\"hljs-comment\">// 搜索条目终止位置</span>\n  to,\n  body: &#123;\n    query: &#123;\n      <span class=\"hljs-comment\">// 使用 dis_max 会在最后计算文档的相关性算分的时候, 只会取queries中的相关性的最大值</span>\n      <span class=\"hljs-comment\">// 关于 dis_max 可以查看这里 [Elasticsearch的入门使用](https://juejin.im/post/5b9dbe645188255c865e0d0e#heading-84)</span>\n      dis_max: &#123;\n        queries: [\n          &#123;\n            match: &#123;\n              <span class=\"hljs-comment\">// 在哪个字段中进行搜索, 这里是 title 字段</span>\n              title: &#123;\n                <span class=\"hljs-comment\">// 要搜索的关键词</span>\n                query: q,\n                <span class=\"hljs-comment\">// 最小匹配数</span>\n                minimum_should_match: <span class=\"hljs-string\">&#x27;50%&#x27;</span>,\n                <span class=\"hljs-comment\">// 设置查询语句的权重, 大于1权重增大, 0到1之间权重逐渐降低。匹配到权重越高的查询语句, 相关性算分越高</span>\n                boost: <span class=\"hljs-number\">4</span>,\n              &#125;\n            &#125;\n          &#125;,\n          &#123;\n            match: &#123;\n              subtitle: &#123;\n                query: q,\n                minimum_should_match: <span class=\"hljs-string\">&#x27;50%&#x27;</span>,\n                boost: <span class=\"hljs-number\">4</span>,\n              &#125;\n            &#125;\n          &#125;, &#123;\n            match: &#123;\n              content: &#123;\n                query: q,\n                minimum_should_match: <span class=\"hljs-string\">&#x27;75%&#x27;</span>,\n                boost: <span class=\"hljs-number\">4</span>,\n              &#125;\n            &#125;\n          &#125;, &#123;\n            match: &#123;\n              tags: &#123;\n                query: q,\n                minimum_should_match: <span class=\"hljs-string\">&#x27;100%&#x27;</span>,\n                boost: <span class=\"hljs-number\">2</span>,\n              &#125;\n            &#125;\n          &#125;, &#123;\n            match: &#123;\n              categories: &#123;\n                query: q,\n                minimum_should_match: <span class=\"hljs-string\">&#x27;100%&#x27;</span>,\n                boost: <span class=\"hljs-number\">2</span>,\n              &#125;\n            &#125;\n          &#125;\n        ],\n        <span class=\"hljs-comment\">// 将其他匹配语句的评分也计算在内。将其他匹配语句的评分结果与tie_breaker相乘, 最后与最佳字段的评分求和得出文档的算分。</span>\n        tie_breaker: <span class=\"hljs-number\">0.3</span>\n      &#125;\n    &#125;,\n    <span class=\"hljs-comment\">// 会对检索的匹配的结果中，匹配的部分做出高亮的展示, 默认使用标签em包裹</span>\n    highlight: &#123;\n      <span class=\"hljs-comment\">// 指定高亮标签前标签</span>\n      pre_tags: [<span class=\"hljs-string\">&#x27;&lt;b&gt;&#x27;</span>],\n      <span class=\"hljs-comment\">// 指定高亮标签后标签</span>\n      post_tags: [<span class=\"hljs-string\">&#x27;&lt;/b&gt;&#x27;</span>],\n      fields: &#123;\n        <span class=\"hljs-comment\">// 返回的匹配结果中会列出title字段(数组)</span>\n        title: &#123;&#125;,\n        <span class=\"hljs-comment\">// 返回的匹配结果中会列出content字段(数组)</span>\n        content: &#123;&#125;,\n      &#125;\n    &#125;\n  &#125;\n&#125;);</code></pre>\n\n<ul>\n<li><code>client.delete([params] [, options] [, callback])</code><br>删除指定的某条数据, 使用此api删除时必须至少指定<code>index</code>, <code>type</code>和<code>id</code>三个参数, 否则就会删除失败, 也就是说此api只能删除单条数据</li>\n</ul>\n<pre><code class=\"hljs js\">client.delete(&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  id: <span class=\"hljs-string\">&#x27;data_id&#x27;</span>\n&#125;)</code></pre>\n\n<ul>\n<li><code>client.deleteByQuery([params] [, options] [, callback])</code><br>删除符合条件的数据, 使用此api可以删除多条数据, 只要数据符合 query 的条件即可</li>\n</ul>\n<p>比如我每次同步博客数据的时候都会先删除之前的所有历史博客数据使用的就是这个api</p>\n<pre><code class=\"hljs js\">client.deleteByQuery(&#123;\n  index: <span class=\"hljs-string\">&#x27;blog&#x27;</span>,\n  type: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n  body: &#123;\n    query: &#123;\n      <span class=\"hljs-comment\">// 匹配所有文档</span>\n      match_all: &#123;&#125;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"elaticsearch与hexo配合\"><a href=\"#elaticsearch与hexo配合\" class=\"headerlink\" title=\"elaticsearch与hexo配合\"></a><code>elaticsearch</code>与<code>hexo</code>配合</h2><p>折腾着写了个hexo的插件<a href=\"https://www.npmjs.com/package/hexo-elasticsearch\"><code>hexo-elasticsearch</code></a>, 在每次重新生成文章的时候都会自动把文章信息同步到自己的es库中, 不过如果真的要做到博客中使用es来进行搜索, 那么你还要做部署es和部署nodejs后端提供查询服务两个部分, 目前来说我就是这样实现的, 关于 es 的部署你可以查看我这篇博客: <a href=\"/docker\">docker学习笔记</a></p>","source":"_posts/elasticsearch.md","full_source":"/Users/krics/workspace/kricsleo_site/source/_posts/elasticsearch.md","path":"elasticsearch/","permalink":"https://kricsleo.com/elasticsearch/","photos":[],"link":""}