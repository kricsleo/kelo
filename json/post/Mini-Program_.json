{"title":"Mini-Program","date":"2018-09-06T07:10:23.000Z","updated":"2020-11-19T04:21:11.509Z","comments":true,"layout":"post","content":"<h1 id=\"微信小程序跳坑记录\"><a href=\"#微信小程序跳坑记录\" class=\"headerlink\" title=\"微信小程序跳坑记录\"></a>微信小程序跳坑记录</h1><p>开发微信小程序还是踩了不少坑的, 官方的文档并不详细, 更新也不及时, 碰到问题还是多 google 吧.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>小程序的逻辑层和渲染层是分开的, 逻辑层运行在 JSCore 中 并没有一个完整的浏览器对象, 因而缺少相关的 DOM API 和 BOM API.<br>小程序的运行环境 –<a href=\"https://juejin.im/post/5b8fd1416fb9a05cf3710690\">参考</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运行环境</th>\n<th align=\"center\">逻辑层</th>\n<th align=\"center\">渲染层</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">IOS</td>\n<td align=\"center\">JavaScriptCore</td>\n<td align=\"center\">WKWebView</td>\n</tr>\n<tr>\n<td align=\"center\">安卓 2</td>\n<td align=\"center\">X5 J\bSCore</td>\n<td align=\"center\">X5 浏览器</td>\n</tr>\n<tr>\n<td align=\"center\">开发工具</td>\n<td align=\"center\">NWJS</td>\n<td align=\"center\">Chrome WebView</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://juejin.im/post/5abca877f265da238155b6bc\">小程序的 Native 和 js 之间的交互是通过 JSBridge 实现</a><br><a href=\"https://www.jianshu.com/p/0078507e14d3\">小程序的视图线程和服务线程的交互生命周期</a><br><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=1474644090505\" alt=\"小程序的视图线程和服务线程的交互生命周期\"></p>\n<p>小程序的文件编译过程:</p>\n<ul>\n<li>WXml -&gt; js -&gt; Virtual DOM -&gt; DOM Tree</li>\n<li>WXSS -&gt; js -&gt; CSS</li>\n</ul>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>微信小程序通过<code>状态模式-单向数据流</code>来实现数据绑定.<br>状态模式定义一个对象, 当对象发生改变时, 状态就发生改变, 然后通知与之绑定的视图刷新, 注意: <strong>数据流向是单向的, \b 即视图变化不会引起对象状态变化</strong>.<br>如果想要视图改变的时候让对象状态也一并改变, 那么就需要依赖事件来实现, 即视图变化 -&gt; 触发事件 -&gt; 捕获事件 -&gt; 回调处理(在这里可以操作对象)</p>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h3 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h3><p>整个小程序有三个生命阶段:</p>\n<ol>\n<li>小程序初始化完成时: <code>onLaunch</code></li>\n<li>小程序启动，或从后台进入前台显示时: <code>onShow</code></li>\n<li>小程序从前台进入后台时: <code>onHide</code></li>\n</ol>\n<p>关于小程序的销毁有如下机制: 点击左上角关闭或者’Home’键离开微信, 小程序将在后台运行, 只有在后台超过一定时间或者系统内存占用过高时才会真正销毁小程序 –<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html\">参考</a></p>\n<h3 id=\"页面栈\"><a href=\"#页面栈\" class=\"headerlink\" title=\"页面栈\"></a>页面栈</h3><p>目前页面栈最大深度是 10 层 –<a href=\"https://developers.weixin.qq.com/community/develop/doc/000ecec19b04f0e79ab65ec0b5bc04\">来源</a><br>一旦达到 10 层, 将无法再使用<code>wx.navigatoTo()</code>或同等方式打开新页面, 必须使用其他方式清除一定的栈空间以后才能再打开新页面</p>\n<p>路由方式: 五种</p>\n<ol>\n<li><p><code>wx.navigateTo()</code>或者点击<code>&lt;navigator open-type=&quot;navigateTo&quot;/&gt;</code>组件<br>页面栈变化: 仅目标页面(不能是<code>tab</code>页)入栈</p>\n</li>\n<li><p><code>wx.navigateBack()</code>或者点击<code>&lt;navigator open-type=&quot;navigateBack&quot;&gt;</code>组件或者点击<code>左上角返回按钮</code><br>页面栈变化: 仅源页面出栈<br>备注: 该方法可在参数(Ojbject)中额外附加一个 Number 型参数<code>delta</code>, 表示返回的页面数, 也就是要退几次页面栈, 如果<code>delta</code>大于当前栈数, 则返回首页</p>\n</li>\n<li><p><code>wx.redirectTo()</code>或者点击<code>&lt;navigator open-type=&quot;redirectTo&quot;/&gt;</code>组件<br>页面栈变化: 源页面出栈 -&gt; 目标页面(不能是<code>tab</code>页)入栈</p>\n</li>\n<li><p><code>wx.switchTab()</code>或者点击<code>&lt;navigator open-type=&quot;switchTab&quot;/&gt;</code>组件<br>页面栈变化: 清空页面栈 -&gt; 目标页面(必须是<code>tab</code>页)入栈</p>\n</li>\n<li><p><code>wx.reLaunch()</code>或者点击组件<code>&lt;navigator open-type=&quot;reLaunch&quot;/&gt;</code>组件<br>页面栈变化: 清空页面栈 -&gt; 目标页面(任意页面)入栈</p>\n</li>\n</ol>\n<p>同一页面如果被压栈多次, 那么就会在栈中相应的存在多次, 相当于页面顺序浏览的历史记录</p>\n<h3 id=\"页面生命周期\"><a href=\"#页面生命周期\" class=\"headerlink\" title=\"页面生命周期\"></a>页面生命周期</h3><p>从页面栈的变化解释页面的生命周期:</p>\n<ol>\n<li>页面刚入栈在栈顶: <code>onLoad</code> -&gt; <code>onShow</code> -&gt; <code>onReady</code></li>\n<li>页面从栈顶被压栈到第二层: <code>onHide</code></li>\n<li>页面从栈的第二层到最底层之间活动: 无事件</li>\n<li>页面退栈刚到栈顶: <code>onShow</code></li>\n<li>页面从栈顶出栈: <code>onUnload</code> (注意: 页面出栈即被销毁, 不会触发<code>onHide</code>, 直接触发<code>onUnload</code>)</li>\n</ol>\n<p>一个页面要正常显示，必须经历 3 个生命周期：<code>加载</code> -&gt; <code>显示</code> -&gt; <code>渲染</code>, 对应回调函数顺序:<code>onLoad</code> -&gt; <code>onShow</code> -&gt; <code>onReady</code>.<br><strong>官方给出的示例中<code>onReady</code>放在<code>onShow</code>之前, 但是这并不是真正的顺序, 容易误导开发者</strong></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><ol>\n<li><p>hidden 属性<br>首先强调一点: <strong>不要使用<code>hidden</code>属性!</strong></p>\n<ul>\n<li><p>语法<br>正确的写法是<code>hidden=&quot;&#123;&#123;true&#125;&#125;&quot;</code>和<code>hidden=&quot;&#123;&#123;false&#125;&#125;&quot;</code>, 遵循<code>Mustache</code>语法, 双大括号不能省略, 因为<code>hidden</code>的值是<code>Boolean</code>型的, 必须使用<code>Mustache</code>计算值才行, 如果省略了双大括号, 比如<code>hidden=&quot;false&quot;</code>(填写其它内容也一样)), 那么就会把<code>&quot;false&quot;</code>作为字符串处理, 此时字符串不为空, 那么结果就是<code>true</code>, 此组件仍然会被隐藏.</p>\n</li>\n<li><p>为什么不要使用该属性<br><code>hidden</code>属性的表现相当怪异.<br>根据不完全测试, 在<code>view</code>, <code>navigator</code>等组件上表现为会给你的组件添加一个 css 属性<code>display: none;</code>, 如果你是通过<code>id</code>或者<code>class</code>来给组件加上自定义的<code>display</code>属性的话, 那么<code>hidden</code>添加的那个<code>display</code>属性优先级比你的高, 此时组件会被隐藏; 如果你是使用的内联样式<code>style=&quot;display: flex;&quot;</code>来给组件添加<code>display</code>属性, 那么你这里添加的<code>display</code>属性优先级会比较高, 此时<code>hidden</code>属性不生效;<br>在<code>button</code>组件上添加<code>hidden=&quot;&#123;&#123;true&#125;&#125;&quot;</code>表现为会给你的组件上添加一个 css 属性<code>display: none !important;</code>, 这里相比之前多了<code>!important</code>关键字, 所以此时的<code>hidden</code>属性的优先级是最高的, 不会被你自定义的给覆盖掉;<br>在<code>text</code>组件上又是一种表示了, 如果你为<code>text</code>组件添加<code>hidden=&quot;&#123;&#123;true&#125;&#125;&quot;</code>, 那么只要你给这个组件自定义了<code>display</code>属性, 你的优先级就会比<code>hidden</code>的高, <code>hidden</code>处于不生效的状态, 如果你没有自定义, 那么<code>hidden</code>才会生效;<br>基于上面的种种怪异的表现, 已经不需要去测试更多的组件了, 因为这已经有足够充分的理由不去使用<code>hidden</code>属性了.</p>\n</li>\n<li><p>替代办法<br>我们使用<code>hidden</code>属性无非是想控制组件的显示与否, 那么可以采取如下的替代方案:</p>\n</li>\n</ul>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;display: &#123;&#123;isHidden ? &#x27;none&#x27; : &#x27;flex&#x27;&#125;&#125;;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></code></pre>\n\n<ul>\n<li>备注<br>对于不怎么切换显示隐藏的组件可以使用<code>wx:if</code>, 这样的渲染支出是可以接受的, 但是如果一个组件会经常的切换显示隐藏, 那么最好考虑采取<code>display: &quot;none;&quot;</code>的方法, 因为这样不需要重复渲染组件, 只要切换显示隐藏即可, 可以减少 cpu 支出, 提高页面效率. <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/conditional.html\">官方说法</a></li>\n</ul>\n</li>\n<li><p>scroll-view<br>注意：使用竖向滚动时，需要给<code>scroll-view</code>一个固定高度, 否则无法<code>点击回到顶部</code>以及<code>滚动到指定位置</code></p>\n</li>\n<li><p>text<br><code>text</code>组件内只支持嵌套<code>text</code></p>\n</li>\n<li><p>cover-view<br> 在ios中如果<code>cover-view</code>内的文字使用了<code>rotate</code>旋转, 那么文字将会显示不全, 只能显示一个文字, 官方bug没有修复, 见<a href=\"https://developers.weixin.qq.com/community/develop/doc/00088a24548420b41d47a08f158400\">cover-view使用transform rotate后内容会被裁剪</a>, 目前的做法最简单的是把文字做成图片, 另一种很麻烦的做法是一个<code>cover-view</code>一个文字, 计算每个<code>cover-view</code>的文字, 最后拼成整行的文字.</p>\n</li>\n</ol>\n<h2 id=\"request\"><a href=\"#request\" class=\"headerlink\" title=\"request\"></a>request</h2><p><code>GET</code>一般都正常, 但是<code>POST</code>请求真可谓是’一千个读者有一千个哈姆雷特’, 各种失败的情况都有, 可尝试如下方法:</p>\n<ol>\n<li><p>首先<code>method</code>是必须设置为<code>POST</code>的;</p>\n</li>\n<li><p><code>header</code>中设置<code>&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>, 也有说小写<code>&quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>能成功;</p>\n</li>\n<li><p>data 有说不能直接传<code>json</code>格式, 需要先转格式:</p>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">json2Form</span>(<span class=\"hljs-params\">json</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> str = [];\n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> p <span class=\"hljs-keyword\">in</span> json</span>)</span>&#123;\n        str.push(<span class=\"hljs-built_in\">encodeURIComponent</span>(p) + <span class=\"hljs-string\">&quot;=&quot;</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(json[p]));\n    &#125;\n    <span class=\"hljs-keyword\">return</span> str.join(<span class=\"hljs-string\">&quot;&amp;&quot;</span>);\n&#125;\n\n<span class=\"hljs-keyword\">let</span> data = &#123;\n  name: <span class=\"hljs-string\">&#x27;张三&#x27;</span>,\n  age: <span class=\"hljs-string\">&#x27;23&#x27;</span>\n&#125;;\n\n<span class=\"hljs-keyword\">const</span> ajaxData = json2Form(data); <span class=\"hljs-comment\">// 然后将`ajaxData`附在请求的`data`中字段中</span></code></pre>\n</li>\n<li><p>也有说服务端必须是<code>https</code>的;</p>\n</li>\n<li><p>实在不行服务端就改成<code>GET</code>吧…</p>\n</li>\n</ol>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><p>小程序对于服务器的域名有要求, 在开发时如果没有 https 的服务器, 那么 pc 端可以把微信开发工具里的域名校验展示关闭, ios 端打开调试模式运行小程序, 安卓端打不打开调试模式都可以, 之后如果申请到了 https 的服务器, 那么把服务器域名加入到微信管理平台的域名列表中, 然后就可以关闭各种之前调试的东西正常使用了.</p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><p>对小程序的源码分析应该会是比较大的工作量, 所以我打算另外用一篇文章来记录, 这里先挖下一个坑</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 微信小程序源码分析</li>\n</ul>\n","excerpt":"<h1 id=\"微信小程序跳坑记录\"><a href=\"#微信小程序跳坑记录\" class=\"headerlink\" title=\"微信小程序跳坑记录\"></a>微信小程序跳坑记录</h1><p>开发微信小程序还是踩了不少坑的, 官方的文档并不详细, 更新也不及时, 碰到问题还是多 google 吧.</p>","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>小程序的逻辑层和渲染层是分开的, 逻辑层运行在 JSCore 中 并没有一个完整的浏览器对象, 因而缺少相关的 DOM API 和 BOM API.<br>小程序的运行环境 –<a href=\"https://juejin.im/post/5b8fd1416fb9a05cf3710690\">参考</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运行环境</th>\n<th align=\"center\">逻辑层</th>\n<th align=\"center\">渲染层</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">IOS</td>\n<td align=\"center\">JavaScriptCore</td>\n<td align=\"center\">WKWebView</td>\n</tr>\n<tr>\n<td align=\"center\">安卓 2</td>\n<td align=\"center\">X5 J\bSCore</td>\n<td align=\"center\">X5 浏览器</td>\n</tr>\n<tr>\n<td align=\"center\">开发工具</td>\n<td align=\"center\">NWJS</td>\n<td align=\"center\">Chrome WebView</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://juejin.im/post/5abca877f265da238155b6bc\">小程序的 Native 和 js 之间的交互是通过 JSBridge 实现</a><br><a href=\"https://www.jianshu.com/p/0078507e14d3\">小程序的视图线程和服务线程的交互生命周期</a><br><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=1474644090505\" alt=\"小程序的视图线程和服务线程的交互生命周期\"></p>\n<p>小程序的文件编译过程:</p>\n<ul>\n<li>WXml -&gt; js -&gt; Virtual DOM -&gt; DOM Tree</li>\n<li>WXSS -&gt; js -&gt; CSS</li>\n</ul>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>微信小程序通过<code>状态模式-单向数据流</code>来实现数据绑定.<br>状态模式定义一个对象, 当对象发生改变时, 状态就发生改变, 然后通知与之绑定的视图刷新, 注意: <strong>数据流向是单向的, \b 即视图变化不会引起对象状态变化</strong>.<br>如果想要视图改变的时候让对象状态也一并改变, 那么就需要依赖事件来实现, 即视图变化 -&gt; 触发事件 -&gt; 捕获事件 -&gt; 回调处理(在这里可以操作对象)</p>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h3 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h3><p>整个小程序有三个生命阶段:</p>\n<ol>\n<li>小程序初始化完成时: <code>onLaunch</code></li>\n<li>小程序启动，或从后台进入前台显示时: <code>onShow</code></li>\n<li>小程序从前台进入后台时: <code>onHide</code></li>\n</ol>\n<p>关于小程序的销毁有如下机制: 点击左上角关闭或者’Home’键离开微信, 小程序将在后台运行, 只有在后台超过一定时间或者系统内存占用过高时才会真正销毁小程序 –<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html\">参考</a></p>\n<h3 id=\"页面栈\"><a href=\"#页面栈\" class=\"headerlink\" title=\"页面栈\"></a>页面栈</h3><p>目前页面栈最大深度是 10 层 –<a href=\"https://developers.weixin.qq.com/community/develop/doc/000ecec19b04f0e79ab65ec0b5bc04\">来源</a><br>一旦达到 10 层, 将无法再使用<code>wx.navigatoTo()</code>或同等方式打开新页面, 必须使用其他方式清除一定的栈空间以后才能再打开新页面</p>\n<p>路由方式: 五种</p>\n<ol>\n<li><p><code>wx.navigateTo()</code>或者点击<code>&lt;navigator open-type=&quot;navigateTo&quot;/&gt;</code>组件<br>页面栈变化: 仅目标页面(不能是<code>tab</code>页)入栈</p>\n</li>\n<li><p><code>wx.navigateBack()</code>或者点击<code>&lt;navigator open-type=&quot;navigateBack&quot;&gt;</code>组件或者点击<code>左上角返回按钮</code><br>页面栈变化: 仅源页面出栈<br>备注: 该方法可在参数(Ojbject)中额外附加一个 Number 型参数<code>delta</code>, 表示返回的页面数, 也就是要退几次页面栈, 如果<code>delta</code>大于当前栈数, 则返回首页</p>\n</li>\n<li><p><code>wx.redirectTo()</code>或者点击<code>&lt;navigator open-type=&quot;redirectTo&quot;/&gt;</code>组件<br>页面栈变化: 源页面出栈 -&gt; 目标页面(不能是<code>tab</code>页)入栈</p>\n</li>\n<li><p><code>wx.switchTab()</code>或者点击<code>&lt;navigator open-type=&quot;switchTab&quot;/&gt;</code>组件<br>页面栈变化: 清空页面栈 -&gt; 目标页面(必须是<code>tab</code>页)入栈</p>\n</li>\n<li><p><code>wx.reLaunch()</code>或者点击组件<code>&lt;navigator open-type=&quot;reLaunch&quot;/&gt;</code>组件<br>页面栈变化: 清空页面栈 -&gt; 目标页面(任意页面)入栈</p>\n</li>\n</ol>\n<p>同一页面如果被压栈多次, 那么就会在栈中相应的存在多次, 相当于页面顺序浏览的历史记录</p>\n<h3 id=\"页面生命周期\"><a href=\"#页面生命周期\" class=\"headerlink\" title=\"页面生命周期\"></a>页面生命周期</h3><p>从页面栈的变化解释页面的生命周期:</p>\n<ol>\n<li>页面刚入栈在栈顶: <code>onLoad</code> -&gt; <code>onShow</code> -&gt; <code>onReady</code></li>\n<li>页面从栈顶被压栈到第二层: <code>onHide</code></li>\n<li>页面从栈的第二层到最底层之间活动: 无事件</li>\n<li>页面退栈刚到栈顶: <code>onShow</code></li>\n<li>页面从栈顶出栈: <code>onUnload</code> (注意: 页面出栈即被销毁, 不会触发<code>onHide</code>, 直接触发<code>onUnload</code>)</li>\n</ol>\n<p>一个页面要正常显示，必须经历 3 个生命周期：<code>加载</code> -&gt; <code>显示</code> -&gt; <code>渲染</code>, 对应回调函数顺序:<code>onLoad</code> -&gt; <code>onShow</code> -&gt; <code>onReady</code>.<br><strong>官方给出的示例中<code>onReady</code>放在<code>onShow</code>之前, 但是这并不是真正的顺序, 容易误导开发者</strong></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><ol>\n<li><p>hidden 属性<br>首先强调一点: <strong>不要使用<code>hidden</code>属性!</strong></p>\n<ul>\n<li><p>语法<br>正确的写法是<code>hidden=&quot;&#123;&#123;true&#125;&#125;&quot;</code>和<code>hidden=&quot;&#123;&#123;false&#125;&#125;&quot;</code>, 遵循<code>Mustache</code>语法, 双大括号不能省略, 因为<code>hidden</code>的值是<code>Boolean</code>型的, 必须使用<code>Mustache</code>计算值才行, 如果省略了双大括号, 比如<code>hidden=&quot;false&quot;</code>(填写其它内容也一样)), 那么就会把<code>&quot;false&quot;</code>作为字符串处理, 此时字符串不为空, 那么结果就是<code>true</code>, 此组件仍然会被隐藏.</p>\n</li>\n<li><p>为什么不要使用该属性<br><code>hidden</code>属性的表现相当怪异.<br>根据不完全测试, 在<code>view</code>, <code>navigator</code>等组件上表现为会给你的组件添加一个 css 属性<code>display: none;</code>, 如果你是通过<code>id</code>或者<code>class</code>来给组件加上自定义的<code>display</code>属性的话, 那么<code>hidden</code>添加的那个<code>display</code>属性优先级比你的高, 此时组件会被隐藏; 如果你是使用的内联样式<code>style=&quot;display: flex;&quot;</code>来给组件添加<code>display</code>属性, 那么你这里添加的<code>display</code>属性优先级会比较高, 此时<code>hidden</code>属性不生效;<br>在<code>button</code>组件上添加<code>hidden=&quot;&#123;&#123;true&#125;&#125;&quot;</code>表现为会给你的组件上添加一个 css 属性<code>display: none !important;</code>, 这里相比之前多了<code>!important</code>关键字, 所以此时的<code>hidden</code>属性的优先级是最高的, 不会被你自定义的给覆盖掉;<br>在<code>text</code>组件上又是一种表示了, 如果你为<code>text</code>组件添加<code>hidden=&quot;&#123;&#123;true&#125;&#125;&quot;</code>, 那么只要你给这个组件自定义了<code>display</code>属性, 你的优先级就会比<code>hidden</code>的高, <code>hidden</code>处于不生效的状态, 如果你没有自定义, 那么<code>hidden</code>才会生效;<br>基于上面的种种怪异的表现, 已经不需要去测试更多的组件了, 因为这已经有足够充分的理由不去使用<code>hidden</code>属性了.</p>\n</li>\n<li><p>替代办法<br>我们使用<code>hidden</code>属性无非是想控制组件的显示与否, 那么可以采取如下的替代方案:</p>\n</li>\n</ul>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;display: &#123;&#123;isHidden ? &#x27;none&#x27; : &#x27;flex&#x27;&#125;&#125;;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></code></pre>\n\n<ul>\n<li>备注<br>对于不怎么切换显示隐藏的组件可以使用<code>wx:if</code>, 这样的渲染支出是可以接受的, 但是如果一个组件会经常的切换显示隐藏, 那么最好考虑采取<code>display: &quot;none;&quot;</code>的方法, 因为这样不需要重复渲染组件, 只要切换显示隐藏即可, 可以减少 cpu 支出, 提高页面效率. <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/conditional.html\">官方说法</a></li>\n</ul>\n</li>\n<li><p>scroll-view<br>注意：使用竖向滚动时，需要给<code>scroll-view</code>一个固定高度, 否则无法<code>点击回到顶部</code>以及<code>滚动到指定位置</code></p>\n</li>\n<li><p>text<br><code>text</code>组件内只支持嵌套<code>text</code></p>\n</li>\n<li><p>cover-view<br> 在ios中如果<code>cover-view</code>内的文字使用了<code>rotate</code>旋转, 那么文字将会显示不全, 只能显示一个文字, 官方bug没有修复, 见<a href=\"https://developers.weixin.qq.com/community/develop/doc/00088a24548420b41d47a08f158400\">cover-view使用transform rotate后内容会被裁剪</a>, 目前的做法最简单的是把文字做成图片, 另一种很麻烦的做法是一个<code>cover-view</code>一个文字, 计算每个<code>cover-view</code>的文字, 最后拼成整行的文字.</p>\n</li>\n</ol>\n<h2 id=\"request\"><a href=\"#request\" class=\"headerlink\" title=\"request\"></a>request</h2><p><code>GET</code>一般都正常, 但是<code>POST</code>请求真可谓是’一千个读者有一千个哈姆雷特’, 各种失败的情况都有, 可尝试如下方法:</p>\n<ol>\n<li><p>首先<code>method</code>是必须设置为<code>POST</code>的;</p>\n</li>\n<li><p><code>header</code>中设置<code>&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>, 也有说小写<code>&quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>能成功;</p>\n</li>\n<li><p>data 有说不能直接传<code>json</code>格式, 需要先转格式:</p>\n<pre><code class=\"hljs JavaScript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">json2Form</span>(<span class=\"hljs-params\">json</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> str = [];\n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> p <span class=\"hljs-keyword\">in</span> json</span>)</span>&#123;\n        str.push(<span class=\"hljs-built_in\">encodeURIComponent</span>(p) + <span class=\"hljs-string\">&quot;=&quot;</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(json[p]));\n    &#125;\n    <span class=\"hljs-keyword\">return</span> str.join(<span class=\"hljs-string\">&quot;&amp;&quot;</span>);\n&#125;\n\n<span class=\"hljs-keyword\">let</span> data = &#123;\n  name: <span class=\"hljs-string\">&#x27;张三&#x27;</span>,\n  age: <span class=\"hljs-string\">&#x27;23&#x27;</span>\n&#125;;\n\n<span class=\"hljs-keyword\">const</span> ajaxData = json2Form(data); <span class=\"hljs-comment\">// 然后将`ajaxData`附在请求的`data`中字段中</span></code></pre>\n</li>\n<li><p>也有说服务端必须是<code>https</code>的;</p>\n</li>\n<li><p>实在不行服务端就改成<code>GET</code>吧…</p>\n</li>\n</ol>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><p>小程序对于服务器的域名有要求, 在开发时如果没有 https 的服务器, 那么 pc 端可以把微信开发工具里的域名校验展示关闭, ios 端打开调试模式运行小程序, 安卓端打不打开调试模式都可以, 之后如果申请到了 https 的服务器, 那么把服务器域名加入到微信管理平台的域名列表中, 然后就可以关闭各种之前调试的东西正常使用了.</p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><p>对小程序的源码分析应该会是比较大的工作量, 所以我打算另外用一篇文章来记录, 这里先挖下一个坑</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 微信小程序源码分析</li>\n</ul>","source":"_posts/Mini-Program.md","full_source":"/Users/krics/workspace/kricsleo_site/source/_posts/Mini-Program.md","path":"Mini-Program/","permalink":"https://kricsleo.com/Mini-Program/","photos":[],"link":""}