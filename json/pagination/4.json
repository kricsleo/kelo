{"hasMore":false,"totalCount":44,"result":[{"title":"MVC-MVP-MVVM","date":"2018-09-28T11:51:24.000Z","excerpt":"<h1 id=\"关于-MV\"><a href=\"#关于-MV\" class=\"headerlink\" title=\"关于 MV*\"></a>关于 MV*</h1><p>为了管理有图形界面的应用程序, 先后提出了 MVC, MVP 和 MVVM 等应用架构模式, 我们也许常常听到这几个词, 尤其对我这个前后端都做过的人来说更是时常接触, 但是对于他们之间的区别却不甚了解, 这几天看了不少文章讲这一块, 在看到 Github 上 livoras 写的文章以后才终在心里有所区分, 这里转载一下 livoras 的原文.</p>\n<p>作者: livoras<br>原文: <a href=\"https://github.com/livoras/blog/issues/11\">https://github.com/livoras/blog/issues/11</a></p>\n<p>另外可以看一下掘金上的这篇文章, 与前端开发结合起来更好理解: <a href=\"https://juejin.im/post/593021272f301e0058273468\">浅析前端开发中的 MVC/MVP/MVVM 模式</a></p>","source":"_posts/MVC-MVP-MVVM.md","path":"MVC-MVP-MVVM/","permalink":"https://kricsleo.com/MVC-MVP-MVVM/","photos":[],"link":""},{"title":"Base64-md5","date":"2018-09-04T01:11:03.000Z","excerpt":"<h1 id=\"Base64编码与md5摘要算法探究及日常应用\"><a href=\"#Base64编码与md5摘要算法探究及日常应用\" class=\"headerlink\" title=\"Base64编码与md5摘要算法探究及日常应用\"></a>Base64编码与md5摘要算法探究及日常应用</h1><p>Base64编码和md5摘要算法我们经常听到,本文主要对着两者算法做一个简单的了解探究</p>","source":"_posts/base64-md5.md","path":"base64-md5/","permalink":"https://kricsleo.com/base64-md5/","photos":[],"link":""},{"title":"ssh-git","date":"2018-08-30T01:56:01.000Z","excerpt":"<h1 id=\"github的https和ssh连接方式探究\"><a href=\"#github的https和ssh连接方式探究\" class=\"headerlink\" title=\"github的https和ssh连接方式探究\"></a>github的https和ssh连接方式探究</h1><p>在本机连接github仓库提交代码时有两种可选方法，一种是使用github账号的用户名和密码的认证方式通过https连接，另一种是使用ssh-key的认证方式通过ssh连接，本文主要研究这两种方式的工作过程以及可能会扩展探究一些相关的知识。</p>","source":"_posts/ssh-git.md","path":"ssh-git/","permalink":"https://kricsleo.com/ssh-git/","photos":[],"link":""},{"title":"AST","date":"2018-09-24T08:33:49.000Z","excerpt":"<h1 id=\"AST\"><a href=\"#AST\" class=\"headerlink\" title=\"AST\"></a>AST</h1><h2 id=\"AST-简介\"><a href=\"#AST-简介\" class=\"headerlink\" title=\"AST 简介\"></a>AST 简介</h2><blockquote>\n<p>在计算机科学中, 抽象语法树(Abstract Syntax Tree, AST)或者简称语法树(Syntax Tree)是源代码语法解构的一种抽象表现, 它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构. – <a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9\">维基百科</a></p>\n</blockquote>\n<p>而在 JavaScript 中我们通过 JavaScript Parser 把代码转化为一颗抽象语法树（AST），这颗树定义了代码的结构，通过操纵这颗树，我们可以精准的定位到声明语句、赋值语句、运算语句等等，实现对代码的分析、优化、变更等操作. 然后浏览器会把 js 源码通过解析器转为抽象语法树，再进一步转化为字节码或直接生成机器码. – <a href=\"https://www.jianshu.com/p/b9f14f384954\">简书文章</a></p>\n<p>关于 Vue 的语法树解析可以查看<a href=\"https://github.com/answershuto/learnVue/blob/master/docs/%E8%81%8A%E8%81%8AVue%E7%9A%84template%E7%BC%96%E8%AF%91.MarkDown\">这里</a></p>","source":"_posts/AST.md","path":"AST/","permalink":"https://kricsleo.com/AST/","photos":[],"link":""}],"totalPage":5,"currentPage":4,"currentCount":4}