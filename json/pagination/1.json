{"hasMore":true,"totalCount":44,"result":[{"title":"css & js trick","date":"2019-09-06T03:21:03.000Z","excerpt":"","source":"_posts/css-js-trick.md","path":"css-js-trick/","permalink":"https://kricsleo.com/css-js-trick/","photos":[],"link":""},{"title":"Docker","date":"2018-09-10T05:19:34.000Z","excerpt":"<h1 id=\"docker学习笔记\"><a href=\"#docker学习笔记\" class=\"headerlink\" title=\"docker学习笔记\"></a>docker学习笔记</h1><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台.</p>","source":"_posts/docker.md","path":"docker/","permalink":"https://kricsleo.com/docker/","photos":[],"link":""},{"title":"constraint-validation","date":"2019-02-25T03:38:04.000Z","excerpt":"<h1 id=\"h5-原生表单校验api\"><a href=\"#h5-原生表单校验api\" class=\"headerlink\" title=\"h5 原生表单校验api\"></a>h5 原生表单校验api</h1><p>我们通常会对表单的 input 的做各种各样的校验, 比如长度, 大小, 格式等等, 其实在h5中为了方便这些校验原生就有不少的校验类型和方式, 只不过错误提示的样式由于各个浏览器不太一样, 而且无法自定义, 产品和设计一般都不会认可这样的表现, 所以目前还是比较少用到浏览器原生的校验, 不过了解一下还有没有坏处的.</p>","source":"_posts/constraint-validation.md","path":"constraint-validation/","permalink":"https://kricsleo.com/constraint-validation/","photos":[],"link":""},{"title":"git-hooks","date":"2019-05-15T03:16:57.000Z","excerpt":"<h1 id=\"git-hooks\"><a href=\"#git-hooks\" class=\"headerlink\" title=\"git hooks\"></a>git hooks</h1><p>现在代码一般都会使用git来进行管理, 其中git hooks(git钩子)是git提供的在代码管理的生命周期中会被触发的一个阶段, 如同react里面组件的生命周期一样, 随着组件的状态的改变, 一些生命周期函数会被触发, 然后可以在触发的时候进行自定义的操作, git 也是如此, 例如我们可以在代码被提交(<code>git commit</code>)前进行代码的自动检查, 通过了检查才允许提交, 否则提交失败, 然后还有常见的自动化部署也是利用了 git hooks, 当新代码被提交到服务端(<code>git push</code>)的时候触发git hooks, 然后服务器自动进行重新部署. </p>","source":"_posts/git-hooks.md","path":"git-hooks/","permalink":"https://kricsleo.com/git-hooks/","photos":[],"link":""},{"title":"flex","date":"2018-09-13T04:36:29.000Z","excerpt":"<h1 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h1><p>关于flex布局的笔记<br><img src=\"https://lc-gold-cdn.xitu.io/0dd26d8e99257ff36443.png?imageslim\" alt=\"flex\"></p>","source":"_posts/flex.md","path":"flex/","permalink":"https://kricsleo.com/flex/","photos":[],"link":""},{"title":"elasticsearch","date":"2019-05-08T02:53:26.000Z","excerpt":"<h1 id=\"elasticsearch\"><a href=\"#elasticsearch\" class=\"headerlink\" title=\"elasticsearch\"></a>elasticsearch</h1><p>我的博客之前的搜索都是使用的<a href=\"https://github.com/alexbruno/hexo-generator-json-content\"><code>hexo-generator-json-content</code></a>这个插件来生成的静态json文件, 在搜索的时候会去请求这个json文件, 里面是整个博客站点的文章数据, 随着博客的数量变多, 这个文件也越来越大, 导致第一次搜索的时候下载这个文件就会出现很长时间的等待, 所以也一直想要优化博客的搜索. </p>\n<p>之前做爬虫的时候使用过<a href=\"https://www.elastic.co/cn/\"><code>elasticsearch</code></a>这个全文检索库, 感觉检索非常方便和快速, 所以这次有时间了就把博客的搜索完全迁移到了es上, 另外还顺带写了一个自动同步 hexo 博客数据到 es 里面的插件<a href=\"https://www.npmjs.com/package/hexo-elasticsearch\"><code>hexo-elasticsearch</code></a></p>","source":"_posts/elasticsearch.md","path":"elasticsearch/","permalink":"https://kricsleo.com/elasticsearch/","photos":[],"link":""},{"title":"git-workflow","date":"2018-08-22T07:01:31.000Z","excerpt":"<h3 id=\"git的日常使用流程记录\"><a href=\"#git的日常使用流程记录\" class=\"headerlink\" title=\"git的日常使用流程记录\"></a>git的日常使用流程记录</h3><p>内容参考于阮一峰老师的<a href=\"https//www.ruanyifeng.com/blog/2015/08/git-use-process.html\">Git使用规范流程</a>，记录一下git的日常使用流程。</p>","source":"_posts/git-workflow.md","path":"git-workflow/","permalink":"https://kricsleo.com/git-workflow/","photos":[],"link":""},{"title":"http-2.0","date":"2018-11-16T09:00:58.000Z","excerpt":"<h1 id=\"关于-HTTP-2-0\"><a href=\"#关于-HTTP-2-0\" class=\"headerlink\" title=\"关于 HTTP/2.0\"></a>关于 HTTP/2.0</h1><p>最近折腾了一段时间的 HTTP/2.0, 目前来说国内外很多大厂都已经用上了 HTTP/2.0, 部署起来也很容易, 这里关于协议的一些细节及部署过程做一个记录.</p>","source":"_posts/http-2-0.md","path":"http-2-0/","permalink":"https://kricsleo.com/http-2-0/","photos":[],"link":""},{"title":"http","date":"2018-10-12T02:29:30.000Z","excerpt":"<h1 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h1><p>http虽然内容简单, 容易理解, 但是内容十分庞大, 涉及到现在通信的方方面面, 我打算花点时间陆陆续续的把我接触到的http的相关部分整理出来, 这里作为一个入口页, 后续持续补充.</p>","source":"_posts/http.md","path":"http/","permalink":"https://kricsleo.com/http/","photos":[],"link":""},{"title":"input-event","date":"2019-04-22T03:14:00.000Z","excerpt":"<h1 id=\"input-元素的事件顺序\"><a href=\"#input-元素的事件顺序\" class=\"headerlink\" title=\"input 元素的事件顺序\"></a>input 元素的事件顺序</h1><p>h5 的<code>&lt;input /&gt;</code>组件上有很多的事件, 这次来详细的探究一下它们的触发顺序和使用场景</p>","source":"_posts/input-event.md","path":"input-event/","permalink":"https://kricsleo.com/input-event/","photos":[],"link":""}],"totalPage":5,"currentPage":1,"currentCount":10}