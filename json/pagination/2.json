{"hasMore":true,"totalCount":44,"result":[{"title":"js-object","date":"2018-09-22T15:44:52.000Z","excerpt":"<h1 id=\"JavaScript的内存机制及按值传递\"><a href=\"#JavaScript的内存机制及按值传递\" class=\"headerlink\" title=\"JavaScript的内存机制及按值传递\"></a>JavaScript的内存机制及按值传递</h1><p>JavaScript是一门轻级的编程语言, 我之前也用过C++和Java, 相比起来JavaScript是一门年轻简约的编程语言, 但是我很看好这门语言, 我记得之前看过一个大牛说现在的前端开发是黎明前的黑暗, 在数年之内必定会清晰明朗起来. 自己深表赞同, JavaScript现在的确是有很多的缺陷, 相比较起来它的依赖库也不如java那般丰富, 但是它一个最大的优点(个人认为)就是它的轻量级, 你仅仅需要一个浏览器(或者Node环境, 但是Node其实也是基于Chrome的V8引擎), 他就能完成自己所有的工作, 我坚信随着各种标准的制定以及已经走在探索路上的前端开发师们能够很快为JavaScript带来它起飞的春天.</p>\n<p>上面是我的个人希冀, 说到这篇文章, 主要是记录一下JavaScript的内存机制以及按值传递规则, 因为我在JavaScript的开发过程中会不由自主的把它和我也使用过的C++和Java进行比较, 我认为编程语言是互通的, 但是它们在某些细节上的处理有所不同, 则正是我们需要去注意的.</p>","source":"_posts/js-object.md","path":"js-object/","permalink":"https://kricsleo.com/js-object/","photos":[],"link":""},{"title":"markdown","date":"2018-08-23T01:09:00.000Z","excerpt":"<h1 id=\"markdown语法整理\"><a href=\"#markdown语法整理\" class=\"headerlink\" title=\"markdown语法整理\"></a>markdown语法整理</h1><p>经常使用markdown来做笔记，这里把现在常用的语法先记录一下，万一老年人了记忆不好，也可以查一查</p>","source":"_posts/markdown.md","path":"markdown/","permalink":"https://kricsleo.com/markdown/","photos":[],"link":""},{"title":"nginx","date":"2018-11-08T02:29:02.000Z","excerpt":"<h1 id=\"nginx-的部署与配置笔记\"><a href=\"#nginx-的部署与配置笔记\" class=\"headerlink\" title=\"nginx 的部署与配置笔记\"></a>nginx 的部署与配置笔记</h1><p>现在很多网站用的都是 nginx 作为代理服务器, 所以为了进行 web 性能的优化, 自然也要折腾一下 nginx 的配置的.</p>","source":"_posts/nginx.md","path":"nginx/","permalink":"https://kricsleo.com/nginx/","photos":[],"link":""},{"title":"length-of-url","date":"2018-11-07T08:42:49.000Z","excerpt":"<h1 id=\"关于URL长度的笔记\"><a href=\"#关于URL长度的笔记\" class=\"headerlink\" title=\"关于URL长度的笔记\"></a>关于URL长度的笔记</h1><p>在了解 cookie 的大小限制的时候看到了一片记录关于 URL 长度的博客, 所以收藏了下来.</p>","source":"_posts/length-of-url.md","path":"length-of-url/","permalink":"https://kricsleo.com/length-of-url/","photos":[],"link":""},{"title":"optimize-my-blog","date":"2018-10-21T06:58:11.000Z","excerpt":"<h1 id=\"hexo主题-MaterialFlow-主题改造\"><a href=\"#hexo主题-MaterialFlow-主题改造\" class=\"headerlink\" title=\"hexo主题 MaterialFlow 主题改造\"></a>hexo主题 MaterialFlow 主题改造</h1><p>打算对博客的访问速度和样式做一个改版优化.</p>","source":"_posts/optimize-my-blog.md","path":"optimize-my-blog/","permalink":"https://kricsleo.com/optimize-my-blog/","photos":[],"link":""},{"title":"Practical-Function-In-Javascript","date":"2018-09-07T01:07:17.000Z","excerpt":"<h1 id=\"JavaScript中的常用函数\"><a href=\"#JavaScript中的常用函数\" class=\"headerlink\" title=\"JavaScript中的常用函数\"></a>JavaScript中的常用函数</h1><p>本文主要整理了平时JavaScript中常用的函数, 持续更新.</p>","source":"_posts/practical-function-in-javascript.md","path":"practical-function-in-javascript/","permalink":"https://kricsleo.com/practical-function-in-javascript/","photos":[],"link":""},{"title":"same-origin-and-CORS","date":"2018-10-16T03:06:36.000Z","excerpt":"<h1 id=\"浏览器同源策略\"><a href=\"#浏览器同源策略\" class=\"headerlink\" title=\"浏览器同源策略\"></a>浏览器同源策略</h1><p>目前的 web 开发还相当的依赖 cookie , 而cookie的使用限制于浏览器的同源策略(same-origin policy), 同时这个策略也是保证我们网站信息安全的基础, 这篇文章主要了解一下浏览器同源策略具体的含义, 以及在实际开发中如何绕过这一限制来达到跨域请求数据的目的.</p>","source":"_posts/same-origin-and-CORS.md","path":"same-origin-and-CORS/","permalink":"https://kricsleo.com/same-origin-and-CORS/","photos":[],"link":""},{"title":"service-worker","date":"2018-11-04T13:32:46.000Z","excerpt":"<h1 id=\"service-worker\"><a href=\"#service-worker\" class=\"headerlink\" title=\"service-worker\"></a>service-worker</h1><p>service worker (服务工作线程)可以为网页提供离线访问的功能, 除此之外当然也有<strong>推送通知</strong>和<strong>后台同步</strong>的功能, 它是一种 JavaScript 线程, 可以独立在主线程外独立运行, 但是无法直接访问和操作 DOM , 服务工作线程通过响应 postMessage 接口发送的消息来与其控制的页面通信, 页面可在必要时对 DOM 执行操作.</p>","source":"_posts/service-worker.md","path":"service-worker/","permalink":"https://kricsleo.com/service-worker/","photos":[],"link":""},{"title":"toFixed","date":"2019-03-15T02:41:44.000Z","excerpt":"<h1 id=\"JS-中的-toFixed精度问题\"><a href=\"#JS-中的-toFixed精度问题\" class=\"headerlink\" title=\"JS 中的 toFixed精度问题\"></a>JS 中的 <code>toFixed</code>精度问题</h1><p>在关于金额的计算中经常会出现精确到两位小数的情况, 然后如果直接使用js的<code>number.toFixed()</code>方法其实会导致意想不到的问题, 比如你可以猜一下下面表达式的执行结果</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-number\">0.1</span> + <span class=\"hljs-number\">0.2</span>;\n\n(<span class=\"hljs-number\">1.555</span>).toFixed(<span class=\"hljs-number\">2</span>);</code></pre>","source":"_posts/toFixed.md","path":"toFixed/","permalink":"https://kricsleo.com/toFixed/","photos":[],"link":""},{"title":"toLocaleString","date":"2019-04-25T02:04:25.000Z","excerpt":"<h1 id=\"冷门的toLocaleString\"><a href=\"#冷门的toLocaleString\" class=\"headerlink\" title=\"冷门的toLocaleString\"></a>冷门的<code>toLocaleString</code></h1><p>js 里面除了我们日常使用的api以外, 其实还是有不少大多数人都不知道的很好用的api的, <code>toLocaleString</code>算一个, 也许你在面试题中看到过用正则来实现数字千位用逗号分隔的做法, 但是如果你能直接说出<code>toLocaleString</code>, 应该是出乎面试官的意料的, 而它的用法可不止于此.</p>\n<p><code>toLocaleString</code>方法在<code>Numnber</code>和<code>Date</code>类型上都有部署, 实现的作用都是格式化数字或者日期, 返回格式化后的字符串.</p>","source":"_posts/toLocaleString.md","path":"toLocaleString/","permalink":"https://kricsleo.com/toLocaleString/","photos":[],"link":""}],"totalPage":5,"currentPage":2,"currentCount":10}