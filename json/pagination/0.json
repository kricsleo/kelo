{"hasMore":true,"totalCount":44,"result":[{"title":"Airbnb-JavaScript-Style-Guide","date":"2018-09-05T01:55:28.000Z","excerpt":"<h1 id=\"Airbnb-JavaScript-Style-Guide-阅读笔记\"><a href=\"#Airbnb-JavaScript-Style-Guide-阅读笔记\" class=\"headerlink\" title=\"Airbnb JavaScript Style Guide 阅读笔记\"></a>Airbnb JavaScript Style Guide 阅读笔记</h1><p>Airbnb的JavaScript代码风格是世界上最流行的JavaScript代码风格之一, 在阅读的时候结合我自己的使用经验记录如下重点, 日后多次阅读应该会持续更新.<br>在线阅读地址: <a href=\"https://github.com/airbnb/javascript\">https://github.com/airbnb/javascript</a><br>(中文翻译版: <a href=\"https://github.com/yuche/javascript\">https://github.com/yuche/javascript</a>)</p>","source":"_posts/Airbnb-JavaScript-Style-Guide.md","path":"Airbnb-JavaScript-Style-Guide/","permalink":"https://kricsleo.com/Airbnb-JavaScript-Style-Guide/","photos":[],"link":""},{"title":"BFC","date":"2019-02-25T00:50:03.000Z","excerpt":"<h1 id=\"BFC-BLOCK-FORMATTING-CONTEXT\"><a href=\"#BFC-BLOCK-FORMATTING-CONTEXT\" class=\"headerlink\" title=\"BFC (BLOCK FORMATTING CONTEXT)\"></a>BFC (BLOCK FORMATTING CONTEXT)</h1><p>关于 BFC (BLOCK FORMATTING CONTEXT: 块格式化上下文)这个专有名词可能听得不多, 但是在实际的页面布局中实际上却是会经常碰到的, 只是没有特意去注意这个现象而已, 这里记录一下它是如何影响我们的布局的.</p>","source":"_posts/BFC.md","path":"BFC/","permalink":"https://kricsleo.com/BFC/","photos":[],"link":""},{"title":"CommonJS-AMD-CMD-ES6","date":"2018-09-25T08:49:17.000Z","excerpt":"<h1 id=\"JavaScript-模块化\"><a href=\"#JavaScript-模块化\" class=\"headerlink\" title=\"JavaScript 模块化\"></a>JavaScript 模块化</h1><p>远古时期, 我们写的 js 都是都是通过 script 标签进行管理, 这使得项目一旦复杂, 页面内便会写上成堆的 script 标签来引入各种外部 js 文件, 而且我们还需要保证 js 的顺序, 因为一个 js 文件内的方法往往依赖另外的 js 来实现, 我们通过确保书写顺序来确保 js 的加载顺序, 这当然是极不方便的, 后来前端工程师们就开始了尝试 js 模块化的探索之旅.</p>","source":"_posts/CommonJS-AMD-CMD.md","path":"CommonJS-AMD-CMD/","permalink":"https://kricsleo.com/CommonJS-AMD-CMD/","photos":[],"link":""},{"title":"Content-Type","date":"2018-10-12T02:32:51.000Z","excerpt":"<h1 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h1><p><code>HTTP/1.1</code>协议规定的<code>HTTP</code>请求方法有<code>OPTIONS</code>、<code>GET</code>、<code>HEAD</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>TRACE</code>、<code>CONNECT</code>这几种, 用的最多的是<code>GET</code>和<code>POST</code>, 这里主要说一下提交请求时的请求头中<code>Content-Type</code>字段</p>","source":"_posts/Content-Type.md","path":"Content-Type/","permalink":"https://kricsleo.com/Content-Type/","photos":[],"link":""},{"title":"ES6-map-set-symbol","date":"2019-01-18T02:23:08.000Z","excerpt":"<h1 id=\"ES6中新的数据类型\"><a href=\"#ES6中新的数据类型\" class=\"headerlink\" title=\"ES6中新的数据类型\"></a>ES6中新的数据类型</h1><p>在ES6里面引入了一些新的数据类型, 包括 <code>Map</code> / <code>Set</code> / <code>Symbol</code> 等等, 这里了解一下他们的用法和使用场景.</p>","source":"_posts/ES6-map-set-symbol.md","path":"ES6-map-set-symbol/","permalink":"https://kricsleo.com/ES6-map-set-symbol/","photos":[],"link":""},{"title":"Mini-Program","date":"2018-09-06T07:10:23.000Z","excerpt":"<h1 id=\"微信小程序跳坑记录\"><a href=\"#微信小程序跳坑记录\" class=\"headerlink\" title=\"微信小程序跳坑记录\"></a>微信小程序跳坑记录</h1><p>开发微信小程序还是踩了不少坑的, 官方的文档并不详细, 更新也不及时, 碰到问题还是多 google 吧.</p>","source":"_posts/Mini-Program.md","path":"Mini-Program/","permalink":"https://kricsleo.com/Mini-Program/","photos":[],"link":""},{"title":"Proxy","date":"2019-01-17T10:50:49.000Z","excerpt":"<h1 id=\"拥抱ES6中的新API–Proxy\"><a href=\"#拥抱ES6中的新API–Proxy\" class=\"headerlink\" title=\"拥抱ES6中的新API–Proxy\"></a>拥抱ES6中的新API–Proxy</h1><p>ES6带来了很多新的方便易用的API, Proxy(代理)就是其中之一, 意思可以理解为对象的代理, 实际上是一个构造函数, 通过这个构造函数我们可以对某个对象进行包装, 然后返回一个新的对象, 然后我们所有对原对象的操作都可以转移到这个新的对象上, 并且我们的操作过程是可以被拦截和过滤的, 这就类似于你请的律师一样, 他会为你处理你的事情, 并在处理的过程中进行一些你设定好的操作, 称为代理.</p>","source":"_posts/Proxy.md","path":"Proxy/","permalink":"https://kricsleo.com/Proxy/","photos":[],"link":""},{"title":"Promise-Generator","date":"2018-10-18T02:33:04.000Z","excerpt":"<h1 id=\"异步解决方案\"><a href=\"#异步解决方案\" class=\"headerlink\" title=\"异步解决方案\"></a>异步解决方案</h1><p>本文是为了解js的异步操作解决方案发展过程. 从原始的回调地狱到ES6的<code>Promise</code>和<code>Generator</code>再到ES7提案阶段的<code>async</code>.<br>这篇笔记也拖了好久了, 该是时候丰富一下了.</p>","source":"_posts/Promise-Generator.md","path":"Promise-Generator/","permalink":"https://kricsleo.com/Promise-Generator/","photos":[],"link":""},{"title":"SASS","date":"2018-11-28T05:36:01.000Z","excerpt":"<h1 id=\"SASS-笔记\"><a href=\"#SASS-笔记\" class=\"headerlink\" title=\"SASS 笔记\"></a>SASS 笔记</h1><p>以前使用 SASS 都比较浅显, 正好最近写的多了, 所以记录一下笔记.</p>\n<p>用css书写样式的时候常常会有大量的重复代码以及折叠class的重复书写， SASS 就是为了解决这种重复工作而出现，同时它提供的<code>@mixins``@include``@extend</code>等功能能够使得样式代码可以被复用，提高可维护性(也许你用的最多的是嵌套规则的书写方式， 这种方式确实很爽)</p>","source":"_posts/SASS.md","path":"SASS/","permalink":"https://kricsleo.com/SASS/","photos":[],"link":""},{"title":"bash","date":"2018-09-13T04:41:22.000Z","excerpt":"<h1 id=\"常用的shell命令\"><a href=\"#常用的shell命令\" class=\"headerlink\" title=\"常用的shell命令\"></a>常用的shell命令</h1>","source":"_posts/bash.md","path":"bash/","permalink":"https://kricsleo.com/bash/","photos":[],"link":""}],"totalPage":5,"currentPage":0,"currentCount":10}